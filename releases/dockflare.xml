<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://selfh.st/apps</id>
  <title>DockFlare Releases</title>
  <updated>2025-06-24T02:36:41.997826-04:00</updated>
  <author>
    <name>selfh.st</name>
    <email>contact@selfh.st</email>
  </author>
  <link href="https://selfh.st/apps" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <subtitle>Self-hosted software releases generated by selfh.st</subtitle>
  <entry>
    <id>https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.8.5</id>
    <title>New release for DockFlare: DockFlare v1.8.5: Enhanced TLS Control with Origin Server Name (SNI) Support</title>
    <updated>2025-05-29T09:23:59-04:00</updated>
    <author>
      <name>ChrispyBacon-dev/DockFlare</name>
    </author>
    <content>&lt;h2&gt;DockFlare v1.8.5: Enhanced TLS Control with Origin Server Name (SNI) Support&lt;/h2&gt;
&lt;p&gt;This release introduces a key enhancement for configuring Cloudflare Tunnel ingress rules: support for &lt;strong&gt;Origin Server Name (SNI)&lt;/strong&gt;. This provides users with more granular control over TLS connections to their origin services.&lt;/p&gt;
&lt;h3&gt;‚ú® New Features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Origin Server Name (SNI) Support for Ingress Rules:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;Users can now specify the &lt;code&gt;originServerName&lt;/code&gt; for an ingress rule. This allows DockFlare to instruct Cloudflare to use a specific Server Name Indication (SNI) during the TLS handshake with the origin service. This is particularly useful when the origin service is behind a reverse proxy, hosts multiple sites on one IP, or expects a specific hostname for its TLS certificate.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Label:&lt;/strong&gt; Added support for the &lt;code&gt;cloudflare.tunnel.&amp;lt;index&amp;gt;.originsrvname=&amp;lt;value&amp;gt;&lt;/code&gt; (or &lt;code&gt;cloudflare.tunnel.originsrvname=&amp;lt;value&amp;gt;&lt;/code&gt; for non-indexed default) label.&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;labels: ["cloudflare.tunnel.0.originsrvname=internal.service.local"]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Web UI (Manual Rules):&lt;/strong&gt; The "Add New Manual Ingress Rule" modal now includes a dedicated "Origin Server Name (SNI for TLS)" input field. This field is dynamically shown only when the selected service type is HTTP or HTTPS, as SNI is primarily relevant for these protocols.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;üîß Improvements &amp;amp; Internal Changes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;State Management:&lt;/strong&gt; The internal state (&lt;code&gt;managed_rules&lt;/code&gt;) now stores the &lt;code&gt;origin_server_name&lt;/code&gt; for each rule configuration.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cloudflare API Interaction:&lt;/strong&gt; The &lt;code&gt;originRequest&lt;/code&gt; object in the Cloudflare tunnel configuration payload is now correctly constructed to include &lt;code&gt;noTLSVerify&lt;/code&gt; and &lt;code&gt;originServerName&lt;/code&gt; as needed. Comparison logic for detecting changes has also been updated.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker Label Parsing:&lt;/strong&gt; Both &lt;code&gt;docker_handler.py&lt;/code&gt; (for new containers) and &lt;code&gt;reconciler.py&lt;/code&gt; (for existing containers during reconciliation) have been updated to parse and process the new &lt;code&gt;originsrvname&lt;/code&gt; label.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Web UI:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;The "Add Manual Rule" backend route (&lt;code&gt;ui_add_manual_rule_route&lt;/code&gt;) now processes and stores the &lt;code&gt;origin_server_name&lt;/code&gt; from the UI form.&lt;/li&gt;
&lt;li&gt;(Optional - if you implemented it) The main "Managed Ingress Rules" table can now display the configured SNI for relevant rules.&lt;/li&gt;
&lt;li&gt;JavaScript in &lt;code&gt;main.js&lt;/code&gt; has been enhanced to dynamically show/hide the "Origin Server Name" input field in the manual rule modal based on the selected service type (HTTP/HTTPS).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Code Quality:&lt;/strong&gt; Addressed a minor issue in &lt;code&gt;docker_handler.py&lt;/code&gt; by removing a duplicate, simpler definition of the &lt;code&gt;is_valid_service&lt;/code&gt; function, ensuring the more robust regex-based validation is used.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;üìù Notes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;originServerName&lt;/code&gt; setting is most effective for &lt;code&gt;http&lt;/code&gt; and &lt;code&gt;https&lt;/code&gt; service types. While it can be set for other types, Cloudflare may ignore it if a TLS handshake to the origin is not part of its standard proxying behavior for that protocol.&lt;/li&gt;
&lt;li&gt;Remember to update your Docker image to &lt;code&gt;dockflare:1.8.5&lt;/code&gt; or &lt;code&gt;dockflare:latest&lt;/code&gt; to use these new features.&lt;/li&gt;
&lt;/ul&gt;</content>
    <link href="https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.8.5" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.8.6</id>
    <title>New release for DockFlare: DockFlare v1.8.6 - Support for edit manual ingress rule</title>
    <updated>2025-06-07T15:36:33-04:00</updated>
    <author>
      <name>ChrispyBacon-dev/DockFlare</name>
    </author>
    <content>&lt;h1&gt;DockFlare v1.8.6&lt;/h1&gt;
&lt;p&gt;This release introduces a usability improvement: the ability to &lt;strong&gt;edit manual ingress rules directly from the web UI&lt;/strong&gt;. You no longer need to delete and recreate a manual rule to make changes. &lt;/p&gt;
&lt;h2&gt;‚ú® New Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Edit Manual Rule Functionality:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;A new &lt;strong&gt;"Edit" button&lt;/strong&gt; now appears next to each manual rule in the "Managed Ingress Rules" table.&lt;/li&gt;
&lt;li&gt;Clicking "Edit" opens a modal pre-populated with the rule's current settings (hostname, path, service, access policy, etc.).&lt;/li&gt;
&lt;li&gt;The backend logic intelligently handles updates by cleanly removing old, unused Cloudflare resources (DNS records, Access Applications) and creating/updating the new ones, preventing orphaned configurations on your Cloudflare account.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Improvements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Improved Code Reusability:&lt;/strong&gt; A shared helper function was created in &lt;code&gt;main.js&lt;/code&gt; to handle path input logic for both the "Add" and "Edit" modals, reducing code duplication.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Enhanced Code Quality:&lt;/strong&gt; This refactoring improves overall code organization, maintainability, and adherence to web development best practices.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Changed Files&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;dockflare/app/web/routes.py&lt;/code&gt;&lt;/strong&gt;: Added the new &lt;code&gt;/ui/manual-rules/edit&lt;/code&gt; route and its handler function to process rule updates.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;dockflare/app/templates/status_page.html&lt;/code&gt;&lt;/strong&gt;: Added the "Edit" button and the "Edit Rule" modal structure. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;dockflare/app/static/js/main.js&lt;/code&gt;&lt;/strong&gt;: Added functions to manage the edit modal's behavior and refactored shared logic.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How to Upgrade&lt;/h2&gt;
&lt;p&gt;To upgrade your Docker Compose deployment, run the following commands in the directory containing your &lt;code&gt;docker-compose.yml&lt;/code&gt; file:&lt;/p&gt;
&lt;p&gt;```bash&lt;/p&gt;
&lt;h1&gt;Pull the latest Docker image for the backend&lt;/h1&gt;
&lt;p&gt;docker-compose pull dockflare&lt;/p&gt;
&lt;h1&gt;Recreate the container with the new image&lt;/h1&gt;
&lt;p&gt;docker-compose up -d --force-recreate dockflare
```&lt;/p&gt;</content>
    <link href="https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.8.6" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.8.7</id>
    <title>New release for DockFlare: Hotfix v1.8.7</title>
    <updated>2025-06-10T10:51:28-04:00</updated>
    <author>
      <name>ChrispyBacon-dev/DockFlare</name>
    </author>
    <content>&lt;h3&gt;&lt;strong&gt;Hotfix v1.8.7: Critical Agent Startup Fix&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;I've just released a critical hotfix that resolves a bug preventing the managed &lt;code&gt;cloudflared&lt;/code&gt; agent from starting correctly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Issue:&lt;/strong&gt;
Some of you may have seen the &lt;code&gt;Provided Tunnel token is not valid&lt;/code&gt; error from the &lt;code&gt;cloudflared&lt;/code&gt; container. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Fix:&lt;/strong&gt;
I've updated the code to be more robust. It now correctly handles both the new JSON format and the original raw text format, ensuring the agent will start reliably for everyone.&lt;/p&gt;
&lt;p&gt;A huge thank you to the community for reporting and diagnosing this in &lt;a href="https://github.com/ChrispyBacon-dev/DockFlare/issues/101"&gt;GitHub Issue #101&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How to Upgrade:&lt;/strong&gt;
To apply the fix, just pull the latest image:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sh
docker-compose pull
docker-compose up -d&lt;/code&gt;&lt;/p&gt;</content>
    <link href="https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.8.7" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.8.9</id>
    <title>New release for DockFlare: DockFlare v1.8.9 - A New Look and More Power!</title>
    <updated>2025-06-22T09:27:20-04:00</updated>
    <author>
      <name>ChrispyBacon-dev/DockFlare</name>
    </author>
    <content>&lt;h2&gt;DockFlare v1.8.9 - A New Look and More Power!&lt;/h2&gt;
&lt;p&gt;I'm thrilled to announce the release of DockFlare v1.8.9! This is a significant update, focused on improving the user experience with a more intuitive, project-aligned configuration and providing much greater routing flexibility.&lt;/p&gt;
&lt;h3&gt;‚ú® New Feature: It's Official! Say Hello to the &lt;code&gt;dockflare.&lt;/code&gt; Label Prefix&lt;/h3&gt;
&lt;p&gt;To better align with the project's identity, the default label prefix has been changed from &lt;code&gt;cloudflare.tunnel.&lt;/code&gt; to &lt;code&gt;dockflare.&lt;/code&gt;. This makes configuration more intuitive and clearly ties your labels to the DockFlare project. I believe this will make setting up new services much cleaner and easier to understand.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Your Old Compose Files Are Safe!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is &lt;strong&gt;not a breaking change&lt;/strong&gt;. I've designed it so that your existing &lt;code&gt;docker-compose.yml&lt;/code&gt; files using the &lt;code&gt;cloudflare.tunnel.&lt;/code&gt; prefix will &lt;strong&gt;continue to work without any changes&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;DockFlare now intelligently checks for labels in a specific order:
1.  A custom prefix you've set via the &lt;code&gt;LABEL_PREFIX&lt;/code&gt; environment variable.
2.  The new &lt;code&gt;dockflare.&lt;/code&gt; prefix.
3.  The legacy &lt;code&gt;cloudflare.tunnel.&lt;/code&gt; prefix.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;New Recommended Label Style:&lt;/strong&gt;
&lt;code&gt;yaml
version: '3.8'
services:
  my-service:
    image: some-image
    labels:
      # The new, cleaner way!
      - "dockflare.enable=true"
      - "dockflare.hostname=service.mydomain.com"
      - "dockflare.service=http://my-service:8080"
      - "dockflare.access.policy=bypass"&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;‚ú® New Feature: Multi-Path Routing per Hostname&lt;/h3&gt;
&lt;p&gt;You are no longer limited to a single path per hostname! I've completely refactored the internal state management so that DockFlare can now intelligently handle multiple ingress rules for the same hostname, each pointing to a different path. This is perfect for routing traffic to different services in a microservice architecture or for exposing different parts of an application under a single domain.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How it Works:&lt;/strong&gt;
By using indexed labels (e.g., &lt;code&gt;.0.&lt;/code&gt;, &lt;code&gt;.1.&lt;/code&gt;, etc.), you can now define multiple rules for the same hostname. DockFlare uses a combination of &lt;strong&gt;hostname and path&lt;/strong&gt; as the unique identifier for a rule, preventing the "last one wins" problem and overwrite behavior of previous versions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example: A single Nginx container serving multiple paths (using the new labels!)&lt;/strong&gt;
```yaml
version: '3.8'
services:
  my-api-gateway:
    image: nginx:alpine
    container_name: my-api-gateway
    labels:
      - "dockflare.enable=true"&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  # --- Rule 0: The root path ---
  - "dockflare.0.hostname=api.mydomain.com"
  - "dockflare.0.service=http://my-api-gateway:80"

  # --- Rule 1: The /users path ---
  - "dockflare.1.hostname=api.mydomain.com"
  - "dockflare.1.path=/users"
  - "dockflare.1.service=http://my-api-gateway:80"

  # --- Rule 2: The /products path ---
  - "dockflare.2.hostname=api.mydomain.com"
  - "dockflare.2.path=/products"
  - "dockflare.2.service=http://my-api-gateway:80"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;``
In this example, DockFlare will correctly create and manage three separate ingress rules for&lt;/code&gt;api.mydomain.com`.&lt;/p&gt;
&lt;h3&gt;üõ†Ô∏è Improvements &amp;amp; Fixes&lt;/h3&gt;
&lt;p&gt;This release also includes important stability enhancements and bug fixes, particularly related to the new multi-path routing feature and UI interactions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Robust UI Policy Management:&lt;/strong&gt; The logic for managing Cloudflare Access policies via the web UI has been completely overhauled. It now correctly handles rules with paths, ensuring that creating, updating, or reverting policies for multi-path hostnames is reliable and error-free.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Manual Rule Creation Fixed:&lt;/strong&gt; An issue where manually created rules were not being correctly added to the Cloudflare Tunnel's ingress configuration has been resolved. The internal state for manual rules now perfectly mirrors the structure of Docker-generated rules, ensuring they are always processed correctly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Efficient API Usage:&lt;/strong&gt; Policy updates from the UI are now more intelligent. DockFlare will first check if the requested configuration already matches what's on Cloudflare, preventing unnecessary API calls and making the interface feel more responsive.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;üöÄ What's Next?&lt;/h3&gt;
&lt;p&gt;I will be updating the official documentation and all examples in the repository shortly to reflect the new &lt;code&gt;dockflare.&lt;/code&gt; prefix as the recommended standard.&lt;/p&gt;
&lt;p&gt;Thank you for your continued support and for contributing to the project with your excellent feedback and feature requests! I hope you enjoy the new flexibility.&lt;/p&gt;</content>
    <link href="https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.8.9" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.9.1</id>
    <title>New release for DockFlare: DockFlare v1.9.1 - Prometheus Metrics &amp; Major Stability Enhancements</title>
    <updated>2025-06-23T13:22:21-04:00</updated>
    <author>
      <name>ChrispyBacon-dev/DockFlare</name>
    </author>
    <content>&lt;h2&gt;DockFlare v1.9.1 - Prometheus Metrics &amp;amp; Major Stability Enhancements&lt;/h2&gt;
&lt;p&gt;I'm thrilled to release DockFlare v1.9.1! This version introduces a highly requested feature for monitoring and observability: &lt;strong&gt;Prometheus Metrics&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This release is also packed with critical bug fixes and stability improvements that significantly enhance the reliability of core features like automatic rule cleanup and Access Policy management.&lt;/p&gt;
&lt;h3&gt;‚ú® New Feature: Prometheus Metrics Endpoint&lt;/h3&gt;
&lt;p&gt;You can now enable the built-in Prometheus metrics endpoint on the managed &lt;code&gt;cloudflared&lt;/code&gt; agent to export a wide range of valuable data for use in tools like Grafana.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How to Use It:&lt;/strong&gt;
Simply add the new &lt;code&gt;CLOUDFLARED_METRICS_PORT&lt;/code&gt; variable to your &lt;code&gt;.env&lt;/code&gt; file:&lt;/p&gt;
&lt;p&gt;```dotenv&lt;/p&gt;
&lt;h1&gt;.env file&lt;/h1&gt;
&lt;h1&gt;Enables the metrics endpoint on port 2000.&lt;/h1&gt;
&lt;h1&gt;The port will be exposed to the Docker host.&lt;/h1&gt;
&lt;p&gt;CLOUDFLARED_METRICS_PORT=2000
```&lt;/p&gt;
&lt;h3&gt;ü§ñ Agent &amp;amp; Rule Management Improvements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Automatic Reconciliation:&lt;/strong&gt; DockFlare will now automatically detect any changes to your metrics configuration (&lt;code&gt;CLOUDFLARED_METRICS_PORT&lt;/code&gt;) and recreate the agent container with the correct settings on restart.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rewritten Rule Cleanup Logic:&lt;/strong&gt; The background cleanup task has been completely rewritten to be resource-aware. It now intelligently handles multi-path services, ensuring that shared resources (like a DNS record) are only deleted when no other active rules depend on them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improved Cleanup Responsiveness:&lt;/strong&gt; The default interval for the cleanup task (&lt;code&gt;CLEANUP_INTERVAL_SECONDS&lt;/code&gt;) has been reduced from 300 to &lt;strong&gt;60 seconds&lt;/strong&gt;, making the automatic deletion of expired rules much more responsive.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;üõ†Ô∏è Bug Fixes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;allowed_idps&lt;/code&gt; Label Fixed:&lt;/strong&gt; Resolved a critical bug that caused API errors when using the &lt;code&gt;access.allowed_idps&lt;/code&gt; label. DockFlare now correctly constructs Access Policy rules using the modern &lt;code&gt;login_method&lt;/code&gt; keyword, making the feature fully functional.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multi-Path UI Policy Management:&lt;/strong&gt; Fixed an issue where managing Access Policies from the web UI would fail for rules that included a path.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Manual Rule Creation:&lt;/strong&gt; Corrected a bug that prevented manually created ingress rules from being properly configured in the Cloudflare Tunnel.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;üìä Example Grafana Dashboard Included&lt;/h3&gt;
&lt;p&gt;&lt;img alt="grafana_dashboard_example" src="https://github.com/user-attachments/assets/0beb2464-a216-45f1-b319-c0700de1f371" /&gt;&lt;/p&gt;
&lt;p&gt;To help you get started immediately, a pre-configured and detailed Grafana dashboard is now included in the repository.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Location:&lt;/strong&gt; You can find &lt;code&gt;dashboard.json&lt;/code&gt; in the &lt;code&gt;examples/&lt;/code&gt; directory of the repository.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How to Use:&lt;/strong&gt; Simply import this JSON file into your Grafana instance.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;How to Upgrade&lt;/h3&gt;
&lt;p&gt;To upgrade your Docker Compose deployment, run the following commands:
```bash&lt;/p&gt;
&lt;h1&gt;Pull the latest stable image&lt;/h1&gt;
&lt;p&gt;docker compose pull&lt;/p&gt;
&lt;h1&gt;Recreate the DockFlare container to apply the new code&lt;/h1&gt;
&lt;p&gt;docker compose up -d
&lt;code&gt;``
After upgrading, you can add the&lt;/code&gt;CLOUDFLARED_METRICS_PORT&lt;code&gt;variable to your&lt;/code&gt;.env` file, and DockFlare will handle the rest.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;&lt;b&gt;Quick Guide: How to Set Up a Local Prometheus &amp; Grafana Stack&lt;/b&gt;&lt;/summary&gt;

If you don't already have a monitoring stack, here is a minimal `docker-compose` setup to get you started quickly.

#### 1. Directory Structure
Create the following folders and files alongside your main `docker-compose.yml`:

```
.
‚îú‚îÄ‚îÄ docker-compose.yml   # Your main compose file
‚îú‚îÄ‚îÄ prometheus.yml         # New file for Prometheus configuration
‚îî‚îÄ‚îÄ grafana-provisioning/  # New folder
    ‚îî‚îÄ‚îÄ datasources/       # New sub-folder
        ‚îî‚îÄ‚îÄ datasource.yml # New file for Grafana configuration
```

#### 2. File Contents

**A) `docker-compose.yml`**

Add the following services to your existing `docker-compose.yml` file:

```yaml
services:
  # ... your existing dockflare service ...

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus_data:/prometheus # Persistent data for Prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - your-dockflare-network # &lt;-- IMPORTANT: Use the same network as DockFlare
    labels:
      - "dockflare.enable=true"
      - "dockflare.hostname=prometheus.your-domain.com"
      - "dockflare.service=http://prometheus:9090"

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    restart: unless-stopped
    volumes:
      - ./grafana_data:/var/lib/grafana # Persistent data for Grafana
      - ./grafana-provisioning:/etc/grafana/provisioning
    networks:
      - your-dockflare-network # &lt;-- IMPORTANT: Use the same network as DockFlare
    labels:
      - "dockflare.enable=true"
      - "dockflare.hostname=metrics.your-domain.com" # Exposes Grafana
      - "dockflare.service=http://grafana:3000"
```
&gt; **Permissions Tip:** If Grafana or Prometheus fail to start with a "Permission denied" error, you may need to set the ownership of the host directories. Run `sudo chown -R 472:472 ./grafana_data` for Grafana and `sudo chown -R 65534:65534 ./prometheus_data` for Prometheus.

**B) `prometheus.yml`**

This file tells Prometheus where to find your `cloudflared` agent.

```yaml
global:
  scrape_interval: 15s

scrape_configs:
  - job_name: 'cloudflared'
    static_configs:
      - targets: ['your-cloudflared-agent-name:2000']
        # --- IMPORTANT ---
        # 1. Replace 'your-cloudflared-agent-name' with the actual name of your agent container (e.g., 'cloudflared-agent-green-bern').
        # 2. Replace '2000' with the port you set for CLOUDFLARED_METRICS_PORT.
```

**C) `grafana-provisioning/datasources/datasource.yml`**

This automatically adds Prometheus as a data source in Grafana.

```yaml
apiVersion: 1

datasources:
  - name: Prometheus
    type: prometheus
    access: proxy
    url: http://prometheus:9090
    isDefault: true
```

#### 3. How to Use

1.  **Start the Stack:** Run `docker-compose up -d`.
2.  **Check Prometheus:** Navigate to your Prometheus URL (e.g., `http://prometheus.your-domain.com`). Go to **Status -&gt; Targets**. The `cloudflared` endpoint should be **UP**.
3.  **Import Dashboard:** Navigate to your Grafana URL (e.g., `http://metrics.your-domain.com`), log in (default: `admin`/`admin`), and import the `dashboard.json` file provided in the `examples/` directory of the DockFlare repository.
4.  **View Your Metrics!**

&lt;/details&gt;</content>
    <link href="https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.9.1" rel="alternate"/>
  </entry>
</feed>
