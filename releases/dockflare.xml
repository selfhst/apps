<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://selfh.st/apps</id>
  <title>DockFlare Releases</title>
  <updated>2025-08-02T21:37:01.349376-04:00</updated>
  <author>
    <name>selfh.st</name>
    <email>contact@selfh.st</email>
  </author>
  <link href="https://selfh.st/apps" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <subtitle>Self-hosted software releases generated by selfh.st</subtitle>
  <entry>
    <id>https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.8.9</id>
    <title>New release for DockFlare: DockFlare v1.8.9 - A New Look and More Power!</title>
    <updated>2025-06-22T09:27:20-04:00</updated>
    <author>
      <name>ChrispyBacon-dev/DockFlare</name>
    </author>
    <content>&lt;h2&gt;DockFlare v1.8.9 - A New Look and More Power!&lt;/h2&gt;
&lt;p&gt;I'm thrilled to announce the release of DockFlare v1.8.9! This is a significant update, focused on improving the user experience with a more intuitive, project-aligned configuration and providing much greater routing flexibility.&lt;/p&gt;
&lt;h3&gt;‚ú® New Feature: It's Official! Say Hello to the &lt;code&gt;dockflare.&lt;/code&gt; Label Prefix&lt;/h3&gt;
&lt;p&gt;To better align with the project's identity, the default label prefix has been changed from &lt;code&gt;cloudflare.tunnel.&lt;/code&gt; to &lt;code&gt;dockflare.&lt;/code&gt;. This makes configuration more intuitive and clearly ties your labels to the DockFlare project. I believe this will make setting up new services much cleaner and easier to understand.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Your Old Compose Files Are Safe!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is &lt;strong&gt;not a breaking change&lt;/strong&gt;. I've designed it so that your existing &lt;code&gt;docker-compose.yml&lt;/code&gt; files using the &lt;code&gt;cloudflare.tunnel.&lt;/code&gt; prefix will &lt;strong&gt;continue to work without any changes&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;DockFlare now intelligently checks for labels in a specific order:
1.  A custom prefix you've set via the &lt;code&gt;LABEL_PREFIX&lt;/code&gt; environment variable.
2.  The new &lt;code&gt;dockflare.&lt;/code&gt; prefix.
3.  The legacy &lt;code&gt;cloudflare.tunnel.&lt;/code&gt; prefix.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;New Recommended Label Style:&lt;/strong&gt;
&lt;code&gt;yaml
version: '3.8'
services:
  my-service:
    image: some-image
    labels:
      # The new, cleaner way!
      - "dockflare.enable=true"
      - "dockflare.hostname=service.mydomain.com"
      - "dockflare.service=http://my-service:8080"
      - "dockflare.access.policy=bypass"&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;‚ú® New Feature: Multi-Path Routing per Hostname&lt;/h3&gt;
&lt;p&gt;You are no longer limited to a single path per hostname! I've completely refactored the internal state management so that DockFlare can now intelligently handle multiple ingress rules for the same hostname, each pointing to a different path. This is perfect for routing traffic to different services in a microservice architecture or for exposing different parts of an application under a single domain.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How it Works:&lt;/strong&gt;
By using indexed labels (e.g., &lt;code&gt;.0.&lt;/code&gt;, &lt;code&gt;.1.&lt;/code&gt;, etc.), you can now define multiple rules for the same hostname. DockFlare uses a combination of &lt;strong&gt;hostname and path&lt;/strong&gt; as the unique identifier for a rule, preventing the "last one wins" problem and overwrite behavior of previous versions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example: A single Nginx container serving multiple paths (using the new labels!)&lt;/strong&gt;
```yaml
version: '3.8'
services:
  my-api-gateway:
    image: nginx:alpine
    container_name: my-api-gateway
    labels:
      - "dockflare.enable=true"&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  # --- Rule 0: The root path ---
  - "dockflare.0.hostname=api.mydomain.com"
  - "dockflare.0.service=http://my-api-gateway:80"

  # --- Rule 1: The /users path ---
  - "dockflare.1.hostname=api.mydomain.com"
  - "dockflare.1.path=/users"
  - "dockflare.1.service=http://my-api-gateway:80"

  # --- Rule 2: The /products path ---
  - "dockflare.2.hostname=api.mydomain.com"
  - "dockflare.2.path=/products"
  - "dockflare.2.service=http://my-api-gateway:80"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;``
In this example, DockFlare will correctly create and manage three separate ingress rules for&lt;/code&gt;api.mydomain.com`.&lt;/p&gt;
&lt;h3&gt;üõ†Ô∏è Improvements &amp;amp; Fixes&lt;/h3&gt;
&lt;p&gt;This release also includes important stability enhancements and bug fixes, particularly related to the new multi-path routing feature and UI interactions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Robust UI Policy Management:&lt;/strong&gt; The logic for managing Cloudflare Access policies via the web UI has been completely overhauled. It now correctly handles rules with paths, ensuring that creating, updating, or reverting policies for multi-path hostnames is reliable and error-free.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Manual Rule Creation Fixed:&lt;/strong&gt; An issue where manually created rules were not being correctly added to the Cloudflare Tunnel's ingress configuration has been resolved. The internal state for manual rules now perfectly mirrors the structure of Docker-generated rules, ensuring they are always processed correctly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Efficient API Usage:&lt;/strong&gt; Policy updates from the UI are now more intelligent. DockFlare will first check if the requested configuration already matches what's on Cloudflare, preventing unnecessary API calls and making the interface feel more responsive.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;üöÄ What's Next?&lt;/h3&gt;
&lt;p&gt;I will be updating the official documentation and all examples in the repository shortly to reflect the new &lt;code&gt;dockflare.&lt;/code&gt; prefix as the recommended standard.&lt;/p&gt;
&lt;p&gt;Thank you for your continued support and for contributing to the project with your excellent feedback and feature requests! I hope you enjoy the new flexibility.&lt;/p&gt;</content>
    <link href="https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.8.9" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.9.1</id>
    <title>New release for DockFlare: DockFlare v1.9.1 - Prometheus Metrics &amp; Major Stability Enhancements</title>
    <updated>2025-06-23T13:22:21-04:00</updated>
    <author>
      <name>ChrispyBacon-dev/DockFlare</name>
    </author>
    <content>&lt;h2&gt;DockFlare v1.9.1 - Prometheus Metrics &amp;amp; Major Stability Enhancements&lt;/h2&gt;
&lt;p&gt;I'm thrilled to release DockFlare v1.9.1! This version introduces a highly requested feature for monitoring and observability: &lt;strong&gt;Prometheus Metrics&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This release is also packed with critical bug fixes and stability improvements that significantly enhance the reliability of core features like automatic rule cleanup and Access Policy management.&lt;/p&gt;
&lt;h3&gt;‚ú® New Feature: Prometheus Metrics Endpoint&lt;/h3&gt;
&lt;p&gt;You can now enable the built-in Prometheus metrics endpoint on the managed &lt;code&gt;cloudflared&lt;/code&gt; agent to export a wide range of valuable data for use in tools like Grafana.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How to Use It:&lt;/strong&gt;
Simply add the new &lt;code&gt;CLOUDFLARED_METRICS_PORT&lt;/code&gt; variable to your &lt;code&gt;.env&lt;/code&gt; file:&lt;/p&gt;
&lt;p&gt;```dotenv&lt;/p&gt;
&lt;h1&gt;.env file&lt;/h1&gt;
&lt;h1&gt;Enables the metrics endpoint on port 2000.&lt;/h1&gt;
&lt;h1&gt;The port will be exposed to the Docker host.&lt;/h1&gt;
&lt;p&gt;CLOUDFLARED_METRICS_PORT=2000
```&lt;/p&gt;
&lt;h3&gt;ü§ñ Agent &amp;amp; Rule Management Improvements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Automatic Reconciliation:&lt;/strong&gt; DockFlare will now automatically detect any changes to your metrics configuration (&lt;code&gt;CLOUDFLARED_METRICS_PORT&lt;/code&gt;) and recreate the agent container with the correct settings on restart.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rewritten Rule Cleanup Logic:&lt;/strong&gt; The background cleanup task has been completely rewritten to be resource-aware. It now intelligently handles multi-path services, ensuring that shared resources (like a DNS record) are only deleted when no other active rules depend on them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improved Cleanup Responsiveness:&lt;/strong&gt; The default interval for the cleanup task (&lt;code&gt;CLEANUP_INTERVAL_SECONDS&lt;/code&gt;) has been reduced from 300 to &lt;strong&gt;60 seconds&lt;/strong&gt;, making the automatic deletion of expired rules much more responsive.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;üõ†Ô∏è Bug Fixes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;allowed_idps&lt;/code&gt; Label Fixed:&lt;/strong&gt; Resolved a critical bug that caused API errors when using the &lt;code&gt;access.allowed_idps&lt;/code&gt; label. DockFlare now correctly constructs Access Policy rules using the modern &lt;code&gt;login_method&lt;/code&gt; keyword, making the feature fully functional.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multi-Path UI Policy Management:&lt;/strong&gt; Fixed an issue where managing Access Policies from the web UI would fail for rules that included a path.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Manual Rule Creation:&lt;/strong&gt; Corrected a bug that prevented manually created ingress rules from being properly configured in the Cloudflare Tunnel.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;üìä Example Grafana Dashboard Included&lt;/h3&gt;
&lt;p&gt;&lt;img alt="grafana_dashboard_example" src="https://github.com/user-attachments/assets/0beb2464-a216-45f1-b319-c0700de1f371" /&gt;&lt;/p&gt;
&lt;p&gt;To help you get started immediately, a pre-configured and detailed Grafana dashboard is now included in the repository.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Location:&lt;/strong&gt; You can find &lt;code&gt;dashboard.json&lt;/code&gt; in the &lt;code&gt;examples/&lt;/code&gt; directory of the repository.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How to Use:&lt;/strong&gt; Simply import this JSON file into your Grafana instance.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;How to Upgrade&lt;/h3&gt;
&lt;p&gt;To upgrade your Docker Compose deployment, run the following commands:
```bash&lt;/p&gt;
&lt;h1&gt;Pull the latest stable image&lt;/h1&gt;
&lt;p&gt;docker compose pull&lt;/p&gt;
&lt;h1&gt;Recreate the DockFlare container to apply the new code&lt;/h1&gt;
&lt;p&gt;docker compose up -d
&lt;code&gt;``
After upgrading, you can add the&lt;/code&gt;CLOUDFLARED_METRICS_PORT&lt;code&gt;variable to your&lt;/code&gt;.env` file, and DockFlare will handle the rest.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;&lt;b&gt;Quick Guide: How to Set Up a Local Prometheus &amp; Grafana Stack&lt;/b&gt;&lt;/summary&gt;

If you don't already have a monitoring stack, here is a minimal `docker-compose` setup to get you started quickly.

#### 1. Directory Structure
Create the following folders and files alongside your main `docker-compose.yml`:

```
.
‚îú‚îÄ‚îÄ docker-compose.yml   # Your main compose file
‚îú‚îÄ‚îÄ prometheus.yml         # New file for Prometheus configuration
‚îî‚îÄ‚îÄ grafana-provisioning/  # New folder
    ‚îî‚îÄ‚îÄ datasources/       # New sub-folder
        ‚îî‚îÄ‚îÄ datasource.yml # New file for Grafana configuration
```

#### 2. File Contents

**A) `docker-compose.yml`**

Add the following services to your existing `docker-compose.yml` file:

```yaml
services:
  # ... your existing dockflare service ...

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus_data:/prometheus # Persistent data for Prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - your-dockflare-network # &lt;-- IMPORTANT: Use the same network as DockFlare
    labels:
      - "dockflare.enable=true"
      - "dockflare.hostname=prometheus.your-domain.com"
      - "dockflare.service=http://prometheus:9090"

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    restart: unless-stopped
    volumes:
      - ./grafana_data:/var/lib/grafana # Persistent data for Grafana
      - ./grafana-provisioning:/etc/grafana/provisioning
    networks:
      - your-dockflare-network # &lt;-- IMPORTANT: Use the same network as DockFlare
    labels:
      - "dockflare.enable=true"
      - "dockflare.hostname=metrics.your-domain.com" # Exposes Grafana
      - "dockflare.service=http://grafana:3000"
```
&gt; **Permissions Tip:** If Grafana or Prometheus fail to start with a "Permission denied" error, you may need to set the ownership of the host directories. Run `sudo chown -R 472:472 ./grafana_data` for Grafana and `sudo chown -R 65534:65534 ./prometheus_data` for Prometheus.

**B) `prometheus.yml`**

This file tells Prometheus where to find your `cloudflared` agent.

```yaml
global:
  scrape_interval: 15s

scrape_configs:
  - job_name: 'cloudflared'
    static_configs:
      - targets: ['your-cloudflared-agent-name:2000']
        # --- IMPORTANT ---
        # 1. Replace 'your-cloudflared-agent-name' with the actual name of your agent container (e.g., 'cloudflared-agent-green-bern').
        # 2. Replace '2000' with the port you set for CLOUDFLARED_METRICS_PORT.
```

**C) `grafana-provisioning/datasources/datasource.yml`**

This automatically adds Prometheus as a data source in Grafana.

```yaml
apiVersion: 1

datasources:
  - name: Prometheus
    type: prometheus
    access: proxy
    url: http://prometheus:9090
    isDefault: true
```

#### 3. How to Use

1.  **Start the Stack:** Run `docker-compose up -d`.
2.  **Check Prometheus:** Navigate to your Prometheus URL (e.g., `http://prometheus.your-domain.com`). Go to **Status -&gt; Targets**. The `cloudflared` endpoint should be **UP**.
3.  **Import Dashboard:** Navigate to your Grafana URL (e.g., `http://metrics.your-domain.com`), log in (default: `admin`/`admin`), and import the `dashboard.json` file provided in the `examples/` directory of the DockFlare repository.
4.  **View Your Metrics!**

&lt;/details&gt;</content>
    <link href="https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.9.1" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.9.4</id>
    <title>New release for DockFlare: DockFlare v1.9.4: Bug Fixes and Stability Improvements</title>
    <updated>2025-07-19T12:35:07-04:00</updated>
    <author>
      <name>ChrispyBacon-dev/DockFlare</name>
    </author>
    <content>&lt;h2&gt;DockFlare v1.9.4: Bug Fixes and Stability Improvements&lt;/h2&gt;
&lt;p&gt;This release is a roll-up of several important bug fixes that improve the stability and usability of DockFlare. A big thank you to the community for the detailed bug reports!&lt;/p&gt;
&lt;h3&gt;What's Fixed?&lt;/h3&gt;
&lt;h4&gt;UI and Manual Rule Fixes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Critical Fix for Email Authentication:&lt;/strong&gt; I've resolved a critical bug that caused an "Internal Server Error" when creating or editing rules to use the "Authenticate by Email" policy from the web UI. This was a regression from recent API updates and is now fully functional again.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Label and Service Validation Fixes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Auto-Redirect for Identity Providers Restored:&lt;/strong&gt; The &lt;code&gt;access.auto_redirect_to_identity=true&lt;/code&gt; label functionality has been fixed. A regression was preventing the correct API payload from being sent to Cloudflare, and this now works as expected.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improved Support for Docker Service Names:&lt;/strong&gt; The validation for service URLs now correctly accepts underscores (&lt;code&gt;_&lt;/code&gt;) in hostnames (e.g., &lt;code&gt;http://my_docker_service:8080&lt;/code&gt;), making it much easier to use with standard Docker Compose naming conventions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Optional Ports for HTTP/S:&lt;/strong&gt; The port is now optional for &lt;code&gt;http://&lt;/code&gt; and &lt;code&gt;https://&lt;/code&gt; services in your labels. If omitted, Cloudflare's default ports (80/443) will be used.&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;summary&gt;&lt;b&gt;Example: Using `auto_redirect_to_identity` with Labels&lt;/b&gt;&lt;/summary&gt;

Here is a practical example of how to use the `auto_redirect_to_identity` feature with a single Identity Provider (IdP), such as Google or Azure AD.

#### `docker-compose.yml` Example
```yaml
version: '3.8'
services:
  my-app:
    image: nginx:alpine # Replace with your actual application image
    restart: unless-stopped
    networks:
      - cloudflare-net
    labels:
      # --- Core DockFlare Labels ---
      - "dockflare.enable=true"
      - "dockflare.hostname=app.YOUR_DOMAIN.com"
      - "dockflare.service=http://my-app:80"

      # --- Access Policy Labels for Auto-Redirect ---
      # 1. Set the policy to 'authenticate'
      - "dockflare.access.policy=authenticate"

      # 2. Enable the auto-redirect feature
      - "dockflare.access.auto_redirect_to_identity=true"

      # 3. Provide the single IdP you want to redirect to
      #    See instructions below on how to find this UUID.
      - "dockflare.access.allowed_idps=YOUR_SINGLE_IDP_UUID_HERE"

networks:
  cloudflare-net:
    # Assumes you have an external network for DockFlare
    name: cloudflare-net
    external: true
```

#### How to Find Your IdP UUID
You can find the UUID for your configured login methods (like Google, Azure AD, etc.) in the Cloudflare Zero Trust dashboard:

1.  Navigate to your **Cloudflare Zero Trust Dashboard**.
2.  On the left-hand menu, go to **Settings** -&gt; **Authentication**.
3.  Under the **Login methods** card, find the provider you want to use and click its **Edit** button.
4.  Look at the URL in your browser's address bar. The UUID is the long string at the very end.

    *Example URL:*
    `https://one.dash.cloudflare.com/ACCOUNT_ID/access/identity-providers/edit/`**`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`**

&lt;/details&gt;

&lt;p&gt;This update is recommended for all users to ensure the best stability and access to all features.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For a detailed list of all changes, please see the &lt;a href="https://github.com/ChrispyBacon-dev/DockFlare/blob/main/CHANGELOG.md"&gt;CHANGELOG.md&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;</content>
    <link href="https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.9.4" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.9.5</id>
    <title>New release for DockFlare: DockFlare v1.9.5: Agent Startup Reliability Fix</title>
    <updated>2025-07-27T06:38:25-04:00</updated>
    <author>
      <name>ChrispyBacon-dev/DockFlare</name>
    </author>
    <content>&lt;h2&gt;DockFlare v1.9.5: Agent Startup Reliability Fix&lt;/h2&gt;
&lt;p&gt;This is a hotfix release that addresses a key stability issue to improve the reliability of the managed &lt;code&gt;cloudflared&lt;/code&gt; agent container.&lt;/p&gt;
&lt;h3&gt;What's Fixed?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Agent Startup Resilience:&lt;/strong&gt; The startup logic is now smarter. DockFlare will automatically detect and recover if the &lt;code&gt;cloudflared&lt;/code&gt; agent container fails to start due to a stale or missing Docker network. It will now remove the broken container and create a new, healthy one in its place.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A huge thank you to &lt;strong&gt;@MattW&lt;/strong&gt; for the excellent bug report and detailed logs in issue &lt;a href="https://github.com/ChrispyBacon-dev/DockFlare/issues/148"&gt;#148&lt;/a&gt; which made this fix possible!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For a detailed list of all changes, please see the &lt;a href="https://github.com/ChrispyBacon-dev/DockFlare/blob/main/CHANGELOG.md"&gt;CHANGELOG.md&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;</content>
    <link href="https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.9.5" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v2.0.0</id>
    <title>New release for DockFlare: DockFlare v2.0.0 - The Policy Management Update</title>
    <updated>2025-08-01T09:56:40-04:00</updated>
    <author>
      <name>ChrispyBacon-dev/DockFlare</name>
    </author>
    <content>&lt;p&gt;This is a landmark release for DockFlare, and I'm thrilled to finally share it. Version 2.0 introduces a completely new way to handle access policies, born directly from user feedback.&lt;/p&gt;
&lt;p&gt;First, a huge thank you to GitHub user &lt;strong&gt;&lt;a href="https://github.com/selimovd"&gt;@selimovd&lt;/a&gt;&lt;/strong&gt; for opening &lt;a href="https://github.com/ChrispyBacon-dev/DockFlare/issues/137"&gt;Issue #137&lt;/a&gt;. His suggestion highlighted a major pain point in the old label system and was the direct inspiration for this entire feature.&lt;/p&gt;
&lt;h2&gt;Announcing the Official Project Website: dockflare.app!&lt;/h2&gt;
&lt;p&gt;With this major release, I'm excited to officially launch the project's website: &lt;strong&gt;&lt;a href="https://dockflare.app"&gt;https://dockflare.app&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is now the central place to find everything you need to know about DockFlare, including feature overviews, quick-start guides, and links to the official documentation. It's the best place to start for new users and a great reference for everyone.&lt;/p&gt;
&lt;h2&gt;New Feature: Access Groups&lt;/h2&gt;
&lt;p&gt;I think we can all agree that managing access rules by copying and pasting a dozen labels across every container was clumsy and a pain to maintain. The core of v2.0, &lt;strong&gt;Access Groups&lt;/strong&gt;, is my solution to this problem.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Define Policies Once:&lt;/strong&gt; There's a new "Settings" page in the web UI where you can create reusable policy templates called Access Groups. You can create a group like &lt;code&gt;nas-family&lt;/code&gt; or &lt;code&gt;dev-team&lt;/code&gt;, define its rules once (allowed emails, domains, session duration), and you're done.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Apply with a Single Label:&lt;/strong&gt; Instead of all the old &lt;code&gt;dockflare.access.*&lt;/code&gt; labels, you now only need one: &lt;code&gt;dockflare.access.group=nas-family&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Update Everywhere, Instantly:&lt;/strong&gt; If you need to add someone to a group, you just edit it in the UI and hit save. DockFlare will automatically find every service using that group and update its Cloudflare Access policy. No more hunting through &lt;code&gt;docker-compose.yml&lt;/code&gt; files.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;UI Overhaul&lt;/h2&gt;
&lt;p&gt;To make room for this new feature and improve the general workflow, I've reorganized the UI.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;New Navigation:&lt;/strong&gt; A simple navigation bar at the top now lets you switch between pages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A Focused Dashboard:&lt;/strong&gt; The main page is now just a dashboard. It's focused on what DockFlare is actively managing: your &lt;strong&gt;Managed Ingress Rules&lt;/strong&gt; and the &lt;strong&gt;Real-time Logs&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;New "Settings" Page:&lt;/strong&gt; This is where the configuration and infrastructure details now live. It contains:&lt;ul&gt;
&lt;li&gt;The new &lt;strong&gt;Access Groups&lt;/strong&gt; manager.&lt;/li&gt;
&lt;li&gt;The list of &lt;strong&gt;All Cloudflare Tunnels on Account&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Tunnel &amp;amp; Agent Status&lt;/strong&gt; card.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integrated Modals:&lt;/strong&gt; The "Add" and "Edit Manual Rule" forms have been updated. You can now assign an Access Group directly from a dropdown, fully integrating the new system into the manual workflow.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Improvements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Centralized Versioning:&lt;/strong&gt; I've centralized the version number so I don't forget to update it in all three places on the UI anymore.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UI Polish:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;The logo in the header moved to the left similar to web site &lt;a href="https://dockflare.app"&gt;https://dockflare.app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Modals with a lot of content will now scroll properly.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Backend Refinements:&lt;/strong&gt; The logic for handling labels and access policies has been significantly refactored to support the new Access Groups feature.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Putting It All Together: A Workflow Example&lt;/h2&gt;
&lt;p&gt;To show how powerful and simple this new system is, let's walk through a common scenario: running a private file-sharing service for your family. We'll use &lt;a href="https://picoshare.com/"&gt;PicoShare&lt;/a&gt;, a great lightweight container for this.&lt;/p&gt;
&lt;h4&gt;Step 1: Create the "nas-family" Access Group&lt;/h4&gt;
&lt;p&gt;First, instead of touching any YAML files, you'll configure the policy in the DockFlare UI.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to the new &lt;strong&gt;Settings&lt;/strong&gt; page in your DockFlare instance.&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;"Create New Group"&lt;/strong&gt; button.&lt;/li&gt;
&lt;li&gt;Fill out the form:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Display Name:&lt;/strong&gt; &lt;code&gt;NAS Family Access&lt;/code&gt; (This is just for the UI)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Group ID:&lt;/strong&gt; &lt;code&gt;nas-family&lt;/code&gt; (This is what you'll use in the label)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Allowed Emails or Domains:&lt;/strong&gt; &lt;code&gt;dad@family.com, mom@family.com&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;"Save Group"&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That's it. Your reusable policy is now created and ready to be used by any service.&lt;/p&gt;
&lt;h4&gt;Step 2: Apply the Group in Your &lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Now, in your &lt;code&gt;docker-compose.yml&lt;/code&gt;, you can set up PicoShare with a single, clean label to handle the entire access policy.&lt;/p&gt;
&lt;p&gt;```yaml
services:
  picoshare:
    image: mtlynch/picoshare
    restart: unless-stopped
    volumes:
      - ./picoshare-data:/app/data
    labels:
      # --- Basic DockFlare config ---
      - "dockflare.enable=true"
      - "dockflare.hostname=files.my-nas.com"
      - "dockflare.service=http://picoshare:8080"&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  # --- Apply the Access Group ---
  # This single label applies the entire policy we just created.
  # No other access.* labels are needed.
  - "dockflare.access.group=nas-family"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h4&gt;Step 3: Deploy&lt;/h4&gt;
&lt;p&gt;When you run &lt;code&gt;docker-compose up -d&lt;/code&gt;, DockFlare will automatically:
1.  Detect the new container.
2.  Read the &lt;code&gt;access.group=nas-family&lt;/code&gt; label.
3.  Look up the policy you created in the UI.
4.  Create a dedicated Cloudflare Access Application for &lt;code&gt;files.my-nas.com&lt;/code&gt; with the rules to only allow &lt;code&gt;dad@family.com&lt;/code&gt; and &lt;code&gt;mom@family.com&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Bonus: Applying the Same Group to a Manual Rule&lt;/h4&gt;
&lt;p&gt;And of course, this isn't limited to Docker containers. If you have another service running on a Raspberry Pi (e.g., at IP &lt;code&gt;192.168.1.50&lt;/code&gt;), you can protect it with the exact same policy:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to the DockFlare Dashboard and click &lt;strong&gt;"Add Manual Rule"&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Fill in the details (&lt;code&gt;hostname&lt;/code&gt;, &lt;code&gt;service&lt;/code&gt; as &lt;code&gt;http://192.168.1.50&lt;/code&gt;, etc.).&lt;/li&gt;
&lt;li&gt;In the "Access Policy" section, simply select &lt;strong&gt;"NAS Family Access"&lt;/strong&gt; from the new &lt;strong&gt;"Assign an Access Group"&lt;/strong&gt; dropdown.&lt;/li&gt;
&lt;li&gt;Click "Add Rule".&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, the exact same centrally managed policy protects both your Docker container and your non-Docker service. If you need to add a new family member later, you only have to edit the group in one place, and access to both services will be updated automatically.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;This was a big undertaking, and I believe it makes DockFlare significantly more powerful and easier to use. I hope you find it as useful as I do. As always, thank you for your support and feedback.&lt;/p&gt;</content>
    <link href="https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v2.0.0" rel="alternate"/>
  </entry>
</feed>
