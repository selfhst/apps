<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://selfh.st/apps</id>
  <title>DockFlare Releases</title>
  <updated>2025-08-07T13:37:13.797769-04:00</updated>
  <author>
    <name>selfh.st</name>
    <email>contact@selfh.st</email>
  </author>
  <link href="https://selfh.st/apps" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <subtitle>Self-hosted software releases generated by selfh.st</subtitle>
  <entry>
    <id>https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.9.4</id>
    <title>New release for DockFlare: DockFlare v1.9.4: Bug Fixes and Stability Improvements</title>
    <updated>2025-07-19T12:35:07-04:00</updated>
    <author>
      <name>ChrispyBacon-dev/DockFlare</name>
    </author>
    <content>&lt;h2&gt;DockFlare v1.9.4: Bug Fixes and Stability Improvements&lt;/h2&gt;
&lt;p&gt;This release is a roll-up of several important bug fixes that improve the stability and usability of DockFlare. A big thank you to the community for the detailed bug reports!&lt;/p&gt;
&lt;h3&gt;What's Fixed?&lt;/h3&gt;
&lt;h4&gt;UI and Manual Rule Fixes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Critical Fix for Email Authentication:&lt;/strong&gt; I've resolved a critical bug that caused an "Internal Server Error" when creating or editing rules to use the "Authenticate by Email" policy from the web UI. This was a regression from recent API updates and is now fully functional again.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Label and Service Validation Fixes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Auto-Redirect for Identity Providers Restored:&lt;/strong&gt; The &lt;code&gt;access.auto_redirect_to_identity=true&lt;/code&gt; label functionality has been fixed. A regression was preventing the correct API payload from being sent to Cloudflare, and this now works as expected.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improved Support for Docker Service Names:&lt;/strong&gt; The validation for service URLs now correctly accepts underscores (&lt;code&gt;_&lt;/code&gt;) in hostnames (e.g., &lt;code&gt;http://my_docker_service:8080&lt;/code&gt;), making it much easier to use with standard Docker Compose naming conventions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Optional Ports for HTTP/S:&lt;/strong&gt; The port is now optional for &lt;code&gt;http://&lt;/code&gt; and &lt;code&gt;https://&lt;/code&gt; services in your labels. If omitted, Cloudflare's default ports (80/443) will be used.&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;summary&gt;&lt;b&gt;Example: Using `auto_redirect_to_identity` with Labels&lt;/b&gt;&lt;/summary&gt;

Here is a practical example of how to use the `auto_redirect_to_identity` feature with a single Identity Provider (IdP), such as Google or Azure AD.

#### `docker-compose.yml` Example
```yaml
version: '3.8'
services:
  my-app:
    image: nginx:alpine # Replace with your actual application image
    restart: unless-stopped
    networks:
      - cloudflare-net
    labels:
      # --- Core DockFlare Labels ---
      - "dockflare.enable=true"
      - "dockflare.hostname=app.YOUR_DOMAIN.com"
      - "dockflare.service=http://my-app:80"

      # --- Access Policy Labels for Auto-Redirect ---
      # 1. Set the policy to 'authenticate'
      - "dockflare.access.policy=authenticate"

      # 2. Enable the auto-redirect feature
      - "dockflare.access.auto_redirect_to_identity=true"

      # 3. Provide the single IdP you want to redirect to
      #    See instructions below on how to find this UUID.
      - "dockflare.access.allowed_idps=YOUR_SINGLE_IDP_UUID_HERE"

networks:
  cloudflare-net:
    # Assumes you have an external network for DockFlare
    name: cloudflare-net
    external: true
```

#### How to Find Your IdP UUID
You can find the UUID for your configured login methods (like Google, Azure AD, etc.) in the Cloudflare Zero Trust dashboard:

1.  Navigate to your **Cloudflare Zero Trust Dashboard**.
2.  On the left-hand menu, go to **Settings** -&gt; **Authentication**.
3.  Under the **Login methods** card, find the provider you want to use and click its **Edit** button.
4.  Look at the URL in your browser's address bar. The UUID is the long string at the very end.

    *Example URL:*
    `https://one.dash.cloudflare.com/ACCOUNT_ID/access/identity-providers/edit/`**`xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`**

&lt;/details&gt;

&lt;p&gt;This update is recommended for all users to ensure the best stability and access to all features.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For a detailed list of all changes, please see the &lt;a href="https://github.com/ChrispyBacon-dev/DockFlare/blob/main/CHANGELOG.md"&gt;CHANGELOG.md&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;</content>
    <link href="https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.9.4" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.9.5</id>
    <title>New release for DockFlare: DockFlare v1.9.5: Agent Startup Reliability Fix</title>
    <updated>2025-07-27T06:38:25-04:00</updated>
    <author>
      <name>ChrispyBacon-dev/DockFlare</name>
    </author>
    <content>&lt;h2&gt;DockFlare v1.9.5: Agent Startup Reliability Fix&lt;/h2&gt;
&lt;p&gt;This is a hotfix release that addresses a key stability issue to improve the reliability of the managed &lt;code&gt;cloudflared&lt;/code&gt; agent container.&lt;/p&gt;
&lt;h3&gt;What's Fixed?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Agent Startup Resilience:&lt;/strong&gt; The startup logic is now smarter. DockFlare will automatically detect and recover if the &lt;code&gt;cloudflared&lt;/code&gt; agent container fails to start due to a stale or missing Docker network. It will now remove the broken container and create a new, healthy one in its place.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A huge thank you to &lt;strong&gt;@MattW&lt;/strong&gt; for the excellent bug report and detailed logs in issue &lt;a href="https://github.com/ChrispyBacon-dev/DockFlare/issues/148"&gt;#148&lt;/a&gt; which made this fix possible!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For a detailed list of all changes, please see the &lt;a href="https://github.com/ChrispyBacon-dev/DockFlare/blob/main/CHANGELOG.md"&gt;CHANGELOG.md&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;</content>
    <link href="https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v1.9.5" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v2.0.0</id>
    <title>New release for DockFlare: DockFlare v2.0.0 - The Policy Management Update</title>
    <updated>2025-08-01T09:56:40-04:00</updated>
    <author>
      <name>ChrispyBacon-dev/DockFlare</name>
    </author>
    <content>&lt;p&gt;This is a landmark release for DockFlare, and I'm thrilled to finally share it. Version 2.0 introduces a completely new way to handle access policies, born directly from user feedback.&lt;/p&gt;
&lt;p&gt;First, a huge thank you to GitHub user &lt;strong&gt;&lt;a href="https://github.com/selimovd"&gt;@selimovd&lt;/a&gt;&lt;/strong&gt; for opening &lt;a href="https://github.com/ChrispyBacon-dev/DockFlare/issues/137"&gt;Issue #137&lt;/a&gt;. His suggestion highlighted a major pain point in the old label system and was the direct inspiration for this entire feature.&lt;/p&gt;
&lt;h2&gt;Announcing the Official Project Website: dockflare.app!&lt;/h2&gt;
&lt;p&gt;With this major release, I'm excited to officially launch the project's website: &lt;strong&gt;&lt;a href="https://dockflare.app"&gt;https://dockflare.app&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is now the central place to find everything you need to know about DockFlare, including feature overviews, quick-start guides, and links to the official documentation. It's the best place to start for new users and a great reference for everyone.&lt;/p&gt;
&lt;h2&gt;New Feature: Access Groups&lt;/h2&gt;
&lt;p&gt;I think we can all agree that managing access rules by copying and pasting a dozen labels across every container was clumsy and a pain to maintain. The core of v2.0, &lt;strong&gt;Access Groups&lt;/strong&gt;, is my solution to this problem.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Define Policies Once:&lt;/strong&gt; There's a new "Settings" page in the web UI where you can create reusable policy templates called Access Groups. You can create a group like &lt;code&gt;nas-family&lt;/code&gt; or &lt;code&gt;dev-team&lt;/code&gt;, define its rules once (allowed emails, domains, session duration), and you're done.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Apply with a Single Label:&lt;/strong&gt; Instead of all the old &lt;code&gt;dockflare.access.*&lt;/code&gt; labels, you now only need one: &lt;code&gt;dockflare.access.group=nas-family&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Update Everywhere, Instantly:&lt;/strong&gt; If you need to add someone to a group, you just edit it in the UI and hit save. DockFlare will automatically find every service using that group and update its Cloudflare Access policy. No more hunting through &lt;code&gt;docker-compose.yml&lt;/code&gt; files.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;UI Overhaul&lt;/h2&gt;
&lt;p&gt;To make room for this new feature and improve the general workflow, I've reorganized the UI.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;New Navigation:&lt;/strong&gt; A simple navigation bar at the top now lets you switch between pages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A Focused Dashboard:&lt;/strong&gt; The main page is now just a dashboard. It's focused on what DockFlare is actively managing: your &lt;strong&gt;Managed Ingress Rules&lt;/strong&gt; and the &lt;strong&gt;Real-time Logs&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;New "Settings" Page:&lt;/strong&gt; This is where the configuration and infrastructure details now live. It contains:&lt;ul&gt;
&lt;li&gt;The new &lt;strong&gt;Access Groups&lt;/strong&gt; manager.&lt;/li&gt;
&lt;li&gt;The list of &lt;strong&gt;All Cloudflare Tunnels on Account&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Tunnel &amp;amp; Agent Status&lt;/strong&gt; card.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integrated Modals:&lt;/strong&gt; The "Add" and "Edit Manual Rule" forms have been updated. You can now assign an Access Group directly from a dropdown, fully integrating the new system into the manual workflow.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Improvements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Centralized Versioning:&lt;/strong&gt; I've centralized the version number so I don't forget to update it in all three places on the UI anymore.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UI Polish:&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;The logo in the header moved to the left similar to web site &lt;a href="https://dockflare.app"&gt;https://dockflare.app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Modals with a lot of content will now scroll properly.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Backend Refinements:&lt;/strong&gt; The logic for handling labels and access policies has been significantly refactored to support the new Access Groups feature.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Putting It All Together: A Workflow Example&lt;/h2&gt;
&lt;p&gt;To show how powerful and simple this new system is, let's walk through a common scenario: running a private file-sharing service for your family. We'll use &lt;a href="https://picoshare.com/"&gt;PicoShare&lt;/a&gt;, a great lightweight container for this.&lt;/p&gt;
&lt;h4&gt;Step 1: Create the "nas-family" Access Group&lt;/h4&gt;
&lt;p&gt;First, instead of touching any YAML files, you'll configure the policy in the DockFlare UI.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to the new &lt;strong&gt;Settings&lt;/strong&gt; page in your DockFlare instance.&lt;/li&gt;
&lt;li&gt;Click the &lt;strong&gt;"Create New Group"&lt;/strong&gt; button.&lt;/li&gt;
&lt;li&gt;Fill out the form:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Display Name:&lt;/strong&gt; &lt;code&gt;NAS Family Access&lt;/code&gt; (This is just for the UI)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Group ID:&lt;/strong&gt; &lt;code&gt;nas-family&lt;/code&gt; (This is what you'll use in the label)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Allowed Emails or Domains:&lt;/strong&gt; &lt;code&gt;dad@family.com, mom@family.com&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;"Save Group"&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That's it. Your reusable policy is now created and ready to be used by any service.&lt;/p&gt;
&lt;h4&gt;Step 2: Apply the Group in Your &lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Now, in your &lt;code&gt;docker-compose.yml&lt;/code&gt;, you can set up PicoShare with a single, clean label to handle the entire access policy.&lt;/p&gt;
&lt;p&gt;```yaml
services:
  picoshare:
    image: mtlynch/picoshare
    restart: unless-stopped
    volumes:
      - ./picoshare-data:/app/data
    labels:
      # --- Basic DockFlare config ---
      - "dockflare.enable=true"
      - "dockflare.hostname=files.my-nas.com"
      - "dockflare.service=http://picoshare:8080"&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  # --- Apply the Access Group ---
  # This single label applies the entire policy we just created.
  # No other access.* labels are needed.
  - "dockflare.access.group=nas-family"
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h4&gt;Step 3: Deploy&lt;/h4&gt;
&lt;p&gt;When you run &lt;code&gt;docker-compose up -d&lt;/code&gt;, DockFlare will automatically:
1.  Detect the new container.
2.  Read the &lt;code&gt;access.group=nas-family&lt;/code&gt; label.
3.  Look up the policy you created in the UI.
4.  Create a dedicated Cloudflare Access Application for &lt;code&gt;files.my-nas.com&lt;/code&gt; with the rules to only allow &lt;code&gt;dad@family.com&lt;/code&gt; and &lt;code&gt;mom@family.com&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Bonus: Applying the Same Group to a Manual Rule&lt;/h4&gt;
&lt;p&gt;And of course, this isn't limited to Docker containers. If you have another service running on a Raspberry Pi (e.g., at IP &lt;code&gt;192.168.1.50&lt;/code&gt;), you can protect it with the exact same policy:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to the DockFlare Dashboard and click &lt;strong&gt;"Add Manual Rule"&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Fill in the details (&lt;code&gt;hostname&lt;/code&gt;, &lt;code&gt;service&lt;/code&gt; as &lt;code&gt;http://192.168.1.50&lt;/code&gt;, etc.).&lt;/li&gt;
&lt;li&gt;In the "Access Policy" section, simply select &lt;strong&gt;"NAS Family Access"&lt;/strong&gt; from the new &lt;strong&gt;"Assign an Access Group"&lt;/strong&gt; dropdown.&lt;/li&gt;
&lt;li&gt;Click "Add Rule".&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, the exact same centrally managed policy protects both your Docker container and your non-Docker service. If you need to add a new family member later, you only have to edit the group in one place, and access to both services will be updated automatically.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;This was a big undertaking, and I believe it makes DockFlare significantly more powerful and easier to use. I hope you find it as useful as I do. As always, thank you for your support and feedback.&lt;/p&gt;</content>
    <link href="https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v2.0.0" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v2.0.1</id>
    <title>New release for DockFlare: DockFlare v2.0.1 - Backup &amp; Restore, Bastion Mode, and Bug Fixes</title>
    <updated>2025-08-05T08:30:14-04:00</updated>
    <author>
      <name>ChrispyBacon-dev/DockFlare</name>
    </author>
    <content>&lt;p&gt;This is a quick follow-up release to polish the major v2.0 update. It addresses a few minor UI bugs, restores a key feature for SSH access, and introduces a brand new Backup &amp;amp; Restore feature.&lt;/p&gt;
&lt;p&gt;A big thank you to the users provided the excellent feedback that led directly to these fixes!&lt;/p&gt;
&lt;h2&gt;New Feature: Backup &amp;amp; Restore&lt;/h2&gt;
&lt;p&gt;As DockFlare becomes more central to managing your services, having a simple way to backup and restore your configuration is essential. I'm happy to announce a new &lt;strong&gt;Backup &amp;amp; Restore&lt;/strong&gt; feature, now available on the &lt;strong&gt;Settings&lt;/strong&gt; page.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Create Backup:&lt;/strong&gt; You can now download a timestamped copy of your entire &lt;code&gt;state.json&lt;/code&gt; file with a single click. This file contains all your manual rules, Access Groups, and the last known state of your Docker-managed services. It's the perfect way to create a snapshot before making big changes or for migration.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Restore from Backup:&lt;/strong&gt; You can upload a previously saved &lt;code&gt;state.json&lt;/code&gt; file to completely overwrite and restore your DockFlare instance to a known-good state. After the restore is complete, DockFlare automatically reloads the state and triggers a full reconciliation to bring your live Cloudflare configuration into sync with the backup.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Added: Bastion Mode for Browser-Based SSH/VNC&lt;/h2&gt;
&lt;p&gt;Support for Cloudflare's browser-rendered terminal has been fixed and properly re-implemented.&lt;/p&gt;
&lt;p&gt;In the "Add/Edit Manual Rule" modal, you will now see two options for SSH:
*   &lt;code&gt;SSH (Native Client)&lt;/code&gt;: Use this for the traditional workflow where you connect using a terminal app (e.g., &lt;code&gt;ssh user@host&lt;/code&gt;). This requires a service address like &lt;code&gt;ssh://192.168.1.50:22&lt;/code&gt;.
*   &lt;code&gt;Bastion (Browser SSH/VNC)&lt;/code&gt;: This is the option to use when you want to access your SSH or VNC sessions directly in a web browser through the Cloudflare Zero Trust dashboard.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How Bastion Mode Works:&lt;/strong&gt;
Unlike other service types, Bastion mode does not require an internal IP or port in the DockFlare UI. When you select this option, DockFlare tells Cloudflare to enable a secure gateway at your public hostname. The connection is handled by the &lt;code&gt;cloudflared&lt;/code&gt; client on your local machine, which routes your request to the correct internal server &lt;em&gt;after&lt;/em&gt; you have authenticated with Cloudflare. This is a more secure setup as the internal IP is never part of the public-facing configuration.&lt;/p&gt;
&lt;p&gt;For more details on how to configure your local client for this, please see the official &lt;a href="https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/use-cases/ssh/"&gt;Cloudflare documentation on rendering a terminal in the browser&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Fixes and Improvements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;State Management:&lt;/strong&gt; I've fixed a bug where the &lt;code&gt;access_group_id&lt;/code&gt; for a rule was not being saved to &lt;code&gt;state.json&lt;/code&gt;. This was causing the "Group:" name to disappear from the UI after a restart, even though the policy was still active. This now saves and loads correctly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UI - DNS Toggles:&lt;/strong&gt; The &lt;code&gt;+&lt;/code&gt; button to view DNS records for tunnels on the Settings page was not working. This has been fixed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UI - "Revert" Button:&lt;/strong&gt; The "Revert" button and "UI Override" badge were incorrectly appearing for manual rules. Since manual rules have no labels to revert to, these elements are now correctly hidden for any rule with "Manual" as its source, reducing confusion.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Validation:&lt;/strong&gt; Fixed an oversight where &lt;code&gt;"bastion"&lt;/code&gt; was not considered a valid service type by the backend validation logic, which was preventing these rules from being created.&lt;/li&gt;
&lt;/ul&gt;</content>
    <link href="https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v2.0.1" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v2.0.5</id>
    <title>New release for DockFlare: Security Advisory &amp; Release v2.0.5: Secure Your DockFlare Instance</title>
    <updated>2025-08-07T07:26:26-04:00</updated>
    <author>
      <name>ChrispyBacon-dev/DockFlare</name>
    </author>
    <content>&lt;p&gt;Hello everyone,&lt;/p&gt;
&lt;p&gt;This important release introduces critical security enhancements for DockFlare. A special thanks to GitHub user &lt;strong&gt;@bcurran3&lt;/strong&gt; for highlighting these security concerns in issue #161, and to Reddit user &lt;strong&gt;t2_hur2hqu6k&lt;/strong&gt; for their valuable feedback. Community contributions like these are invaluable in making DockFlare better and more secure for everyone.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt;
All users are strongly encouraged to update to version &lt;strong&gt;v2.0.5&lt;/strong&gt; and enable password protection as soon as possible to secure your DockFlare instance.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;h2&gt;What's New in v2.0.5&lt;/h2&gt;
&lt;h3&gt;Security Enhancements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Authentication:&lt;/strong&gt; DockFlare now supports password protection for the web UI and API. This is a critical security update, and I urge everyone to enable it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CSRF Protection:&lt;/strong&gt; To prevent Cross-Site Request Forgery (CSRF) attacks, all forms in the web UI are now protected with anti-CSRF tokens.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Strengthened Content Security Policy (CSP):&lt;/strong&gt; The CSP has been made more restrictive to mitigate the risk of Cross-Site Scripting (XSS) and other injection attacks.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pinned Dependencies:&lt;/strong&gt; All Python dependencies in &lt;code&gt;requirements.txt&lt;/code&gt; are now pinned to specific, stable versions. This enhances build reliability and helps prevent potential supply-chain attacks.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;New Features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dismissible Security Warning:&lt;/strong&gt; For a smooth transition, a dismissible warning banner will appear in the UI if authentication is not configured. This banner will guide you through the security setup without locking you out of your application.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2&gt;How to Enable Authentication&lt;/h2&gt;
&lt;p&gt;To secure your DockFlare instance, you need to set two new environment variables: &lt;code&gt;DOCKFLARE_PASSWORD&lt;/code&gt; and &lt;code&gt;SECRET_KEY&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Step 1: Generate a Hashed Password&lt;/h3&gt;
&lt;p&gt;This command creates a secure, hashed version of your password. Run it in your terminal, replacing &lt;code&gt;"YOUR_PASSWORD_HERE"&lt;/code&gt; with a strong, private password.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash
docker run --rm python:3.13-slim sh -c "pip install werkzeug==2.3.7 &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; python -c 'from werkzeug.security import generate_password_hash; print(generate_password_hash(\"YOUR_PASSWORD_HERE\"))'"&lt;/code&gt;
Copy the entire output string, which will look something like &lt;code&gt;pbkdf2:sha256:600000$...&lt;/code&gt;. This is your &lt;code&gt;DOCKFLARE_PASSWORD&lt;/code&gt; value.&lt;/p&gt;
&lt;h3&gt;Step 2: Generate a Secret Key&lt;/h3&gt;
&lt;p&gt;This key is used for session management to keep your login secure. Generate a cryptographically secure key with this command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash
openssl rand -hex 32&lt;/code&gt;
Copy the generated 64-character string. This is your &lt;code&gt;SECRET_KEY&lt;/code&gt; value.&lt;/p&gt;
&lt;h3&gt;Step 3: Update Your Docker Configuration&lt;/h3&gt;
&lt;p&gt;Add the hashed password and secret key as environment variables to your &lt;code&gt;docker-compose.yml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example &lt;code&gt;docker-compose.yml&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;```yaml
services:
  dockflare:
    image: alplat/dockflare:v2.0.5 # Or :unstable, :latest
    restart: always
    ports:
      - "8080:80"
    environment:
      # --- Your other environment variables ---
      - DOCKFLARE_WATCH_ALL=true&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  # --- ADD THE NEW SECURITY VARIABLES ---
  # Paste the full hash from Step 1 here
  - DOCKFLARE_PASSWORD=&amp;lt;your_hashed_password_from_step_1&amp;gt;

  # Paste the random hex string from Step 2 here
  - SECRET_KEY=&amp;lt;your_generated_secret_key_from_step_2&amp;gt;
volumes:
  - /var/run/docker.sock:/var/run/docker.sock:ro
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;``
*(Alternatively, you can place these variables in an&lt;/code&gt;.env` file.)*&lt;/p&gt;
&lt;h3&gt;Step 4: Restart DockFlare&lt;/h3&gt;
&lt;p&gt;Restart your container to apply the new security settings.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash
docker compose down &amp;amp;&amp;amp; docker compose up -d&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Your DockFlare instance is now password-protected. Thank you for your continued support and for taking these steps to secure your instance.&lt;/p&gt;
&lt;p&gt;Cherrs,
Chris&lt;/p&gt;</content>
    <link href="https://github.com/ChrispyBacon-dev/DockFlare/releases/tag/v2.0.5" rel="alternate"/>
  </entry>
</feed>
