<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://selfh.st/apps</id>
  <title>GitLab Releases</title>
  <updated>2025-07-14T02:30:53.709111-04:00</updated>
  <author>
    <name>selfh.st</name>
    <email>contact@selfh.st</email>
  </author>
  <link href="https://selfh.st/apps" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <subtitle>Self-hosted software releases generated by selfh.st</subtitle>
  <entry>
    <id>https://gitlab.com/gitlab-org/gitlab-foss/-/releases/v17.9.0</id>
    <title>New release for GitLab: GitLab 17.9</title>
    <updated>2025-02-20T00:00:00+00:00</updated>
    <author>
      <name>gitlab-org/gitlab-foss</name>
    </author>
    <content>&lt;p&gt;&lt;img alt="16 new features" src="https://img.shields.io/static/v1?color=108548&amp;amp;label=new+features&amp;amp;labelColor=525252&amp;amp;message=16&amp;amp;style=for-the-badge" title="New features added in this release" /&gt;
&lt;img alt="2337 total badges" src="https://img.shields.io/static/v1?color=1F75CB&amp;amp;label=total+features&amp;amp;labelColor=525252&amp;amp;message=2337&amp;amp;style=for-the-badge" title="Total features" /&gt;&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;[Simplified access to deployments within project environments](https://docs.gitlab.com/ee/ci/environments/): &lt;code&gt;Environment Management&lt;/code&gt;&lt;/summary&gt;

&gt; Have you ever struggled to get an overview of your deployments within a project? You can now view recent deployment details in the environments list without having to expand each environment. For each environment, the list shows your latest successful deployment and, if different, your most recent deployment attempt.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Composite identity for more secure AI connections](https://docs.gitlab.com/development/ai_features/composite_identity/): &lt;code&gt;Duo Workflow&lt;/code&gt;&lt;/summary&gt;

&gt; Previously, a request to GitLab could only be authenticated as a single user. With composite identity, we have now made it possible to authenticate a request as a service account and a user simultaneously.
&gt; AI agent use cases often require permissions to be based on the user who initiated the tasks in a system, while simultaneously showing a distinct identity that's separate from the initiating user. A composite identity is our new identity principal, which represents an AI agent's identity. This identity is linked with the identity of the human user who requests actions from the agent.
&gt; Whenever an AI agent action attempts to access a resource, a composite identity token is used. This token belongs to a service account, and is also linked with the human user who is instructing the agent. The authorization checks that run on the token take into account both principals before granting access to a resource. Both identities need to have access to the resource, otherwise access is denied.
&gt; This new functionality enhances our ability to protect resources stored in GitLab.
&gt; For more information about how the composite identity for service accounts can be used, see the [documentation](https://docs.gitlab.com/development/ai_features/composite_identity/).
&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Implement OCI-based GitOps with the FluxCD CI/CD component](https://gitlab.com/components/fluxcd/): &lt;code&gt;Container Registry&lt;/code&gt;, &lt;code&gt;Deployment Management&lt;/code&gt;, &lt;code&gt;Component Catalog&lt;/code&gt;&lt;/summary&gt;

&gt; Have you ever wondered how to implement GitOps best practices with GitLab? The new [FluxCD component](https://gitlab.com/components/fluxcd/) makes it easy. Use the FluxCD component to package Kubernetes manifests into OCI images and store the images in OCI-compatible container registries. You can optionally sign the images and trigger an immediate FluxCD reconciliation.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Get started with the GitLab integration with Kubernetes](https://docs.gitlab.com/ee/user/clusters/agent/getting_started): &lt;code&gt;Deployment Management&lt;/code&gt;&lt;/summary&gt;

&gt; In this release, we added new Kubernetes Getting started guides that show you how to use GitLab to deploy applications to Kubernetes directly and with FluxCD. These easy-to-follow tutorials don't require in-depth Kubernetes knowledge to complete, so both novice and experienced users can learn how to integrate GitLab and Kubernetes.
&gt; 
&gt; To supplement the Kubernetes Getting started guides, we also included a series of recommendations for integrating GitLab into Kubernetes environments.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Discover and migrate certificate-based Kubernetes clusters](https://docs.gitlab.com/ee/api/cluster_discovery.html)&lt;/summary&gt;

&gt; The certificate-based Kubernetes integration will be turned off on GitLab.com for all users between May 6, 2025 9:00 AM UTC and May 8, 2025 22:00 PM UTC, and will be removed from GitLab Self-Managed instances in GitLab 19.0 (expected in May 2026). 
&gt; 
&gt; To help users migrate, we added a new cluster API endpoint that group Owners can query to [discover any certificate-based clusters](https://docs.gitlab.com/ee/api/cluster_discovery.html) registered to a group, subgroup, or project. We also updated the [migration documentation](https://docs.gitlab.com/ee/user/infrastructure/clusters/migrate_to_gitlab_agent.html) to provide instructions for different types of use cases.
&gt; 
&gt; We encourage all GitLab.com users to check if they are affected, and to plan their migrations as soon as possible.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Manage project integrations from a group with the REST API](https://docs.gitlab.com/ee/api/group_integrations.html): &lt;code&gt;API&lt;/code&gt;, &lt;code&gt;Integrations&lt;/code&gt;&lt;/summary&gt;

&gt; Previously, you could manage project integrations from a group in the GitLab UI only. With this release, it's possible to manage these integrations with the REST API too.
&gt; 
&gt; Thanks to [Van](https://gitlab.com/van.m.anderson) for their [initial community contribution](https://gitlab.com/gitlab-org/gitlab/-/merge_requests/148283), which was subsequently picked up and completed by GitLab.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Group sharing visibility enhancement](https://docs.gitlab.com/user/project/members/sharing_projects_groups/#view-shared-groups): &lt;code&gt;Groups &amp; Projects&lt;/code&gt;&lt;/summary&gt;

&gt; We're excited to announce expanded visibility for group sharing across GitLab. Previously, while you could see shared projects on a group's overview page, you couldn't see which groups your group had been invited to join. Now you can view both **Shared projects** and **Shared groups** tabs on the group overview page, giving you a complete view of how your groups are connected and shared throughout your organization. This makes it easier to audit and manage group access across your organization.
&gt; 
&gt; We welcome feedback about this change in [epic 16777](https://gitlab.com/groups/gitlab-org/-/epics/16777).

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/plan/"&gt;Plan&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Wiki page comments](https://docs.gitlab.com/ee/user/discussions/): &lt;code&gt;Wiki&lt;/code&gt;&lt;/summary&gt;

&gt; You can now add comments directly on wiki pages, transforming your documentation into an interactive collaboration space.
&gt; 
&gt; Comments and threads on wiki pages help teams:
&gt; 
&gt; - Discuss content directly in context.
&gt; - Suggest improvements and corrections.
&gt; - Keep documentation accurate and up-to-date.
&gt; - Share knowledge and expertise.
&gt; 
&gt; With wiki comments, teams can maintain living documentation that evolves alongside their projects through direct feedback and discussion.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Control access to GitLab Pages for groups](https://docs.gitlab.com/ee/user/project/pages/pages_access_control.html#restrict-pages-access-to-project-members-for-the-group-and-its-subgroups): &lt;code&gt;Pages&lt;/code&gt;&lt;/summary&gt;

&gt; You can now restrict GitLab Pages access at the group level. Group owners can enable a single setting to make all Pages sites in a group and its subgroups visible only to project members. This centralized control simplifies security management without modifying individual project settings.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Change work item type to another](https://docs.gitlab.com/ee/user/tasks.html#convert-a-task-into-another-item-type): &lt;code&gt;Portfolio Management&lt;/code&gt;&lt;/summary&gt;

&gt; You can now easily change the type of your work items, giving you the flexibility to manage your projects more efficiently.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Work items GraphQL API - additional query filters](https://docs.gitlab.com/ee/api/graphql/reference/): &lt;code&gt;Portfolio Management&lt;/code&gt;&lt;/summary&gt;

&gt; The Work Items GraphQL API now includes additional query filters that let you filter by:
&gt; 
&gt; - Created, updated, closed, and due dates
&gt; - Health status
&gt; - Weight
&gt; 
&gt; These new filters give you more control when querying and organizing work items through the API.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/verify/"&gt;Verify&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Automatic CI/CD pipeline cleanup](https://docs.gitlab.com/ee/ci/pipelines/settings.html#automatic-pipeline-cleanup): &lt;code&gt;Continuous Integration (CI) Scaling&lt;/code&gt;&lt;/summary&gt;

&gt; In the past, if you wanted to delete older CI/CD pipelines, you could only do this through the API.
&gt; 
&gt; In GitLab 17.9, we have introduced a project setting that allows you to set a CI/CD pipeline expiry time.
&gt; Any pipelines and related artifacts older than the defined retention period are deleted.
&gt; This can help reduce the disk usage in projects that run lots of pipelines that generate large artifacts, and even improve overall performance.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[GitLab Runner 17.9](https://docs.gitlab.com/runner): &lt;code&gt;GitLab Runner Core&lt;/code&gt;&lt;/summary&gt;

&gt; We're also releasing GitLab Runner 17.9 today! GitLab Runner is the highly-scalable build agent that runs 
&gt; your CI/CD jobs and sends the results back to a GitLab instance. GitLab Runner works in conjunction with 
&gt; GitLab CI/CD, the open-source continuous integration service included with GitLab.
&gt; 
&gt; #### What's new:
&gt; 
&gt; - [Add health check for runner autoscaler instances](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/38271)
&gt; - [Add histogram metrics for runner prepare stage duration](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/37471)
&gt; - [Add support for custom service container names to the Kubernetes executor](https://gitlab.com/gitlab-org/gitlab/-/issues/421131)
&gt; 
&gt; #### Bug Fixes:
&gt; 
&gt; - [GitLab Runner is unable to retrieve cache from S3 Express One Zone](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/38484)
&gt; - [GitLab Runner on Kubernetes reports 'script_failure' instead of 'runner_system_failure' for AWS Spot instances](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/37911)
&gt; 
&gt; The list of all changes is in the GitLab Runner [CHANGELOG](https://gitlab.com/gitlab-org/gitlab-runner/blob/17-9-stable/CHANGELOG.md).

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/software_supply_chain_security/"&gt;Software supply chain security&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Rotate access tokens with `self_rotate` scope](https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html#personal-access-token-scopes): &lt;code&gt;System Access&lt;/code&gt;&lt;/summary&gt;

&gt; You can now use the `self_rotate` scope to rotate access tokens. This scope is available for personal, project, or group access tokens. Previously, this required two requests: One to obtain a new token, then another to perform the token rotation.
&gt; 
&gt; Thank you [Stéphane Talbot](https://gitlab.com/stalb) and [Anthony Juckel](https://gitlab.com/ajuckel) for your contribution! 

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[View inactive project and group access tokens](https://docs.gitlab.com/ee/user/project/settings/project_access_tokens.html#revoke-or-rotate-a-project-access-token) &lt;i&gt;(self-managed only)&lt;/i&gt;: &lt;code&gt;System Access&lt;/code&gt;&lt;/summary&gt;

&gt; You can now view inactive group and project access tokens in the UI. Previously, GitLab instantly deleted project and group access tokens after they expired or were revoked. This lack of a record of inactive tokens made auditing and security reviews more difficult. GitLab now retains inactive group and project access token records for 30 days, which helps teams track token usage and expiration for compliance and monitoring purposes.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[View access token IP addresses](https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html#view-the-time-at-and-ips-where-a-token-was-last-used): &lt;code&gt;System Access&lt;/code&gt;&lt;/summary&gt;

&gt; Previously, when viewing your personal access tokens, the only usage information you could see was how many minutes ago the token was used. Now, you can also see up to the last seven IP addresses that the tokens were used from. This combined information can help you track where your token is being used.
&gt; 
&gt; Thank you [Jayce Martin](https://jrm2k.us), [Avinash Koganti](http://www.linkedin.com/in/avinash-koganti-38b511162), [Austin Dixon](https://austindixon.net/), and [Rohit Kala](https://www.linkedin.com/in/rohit-kala-1b891a179) for your contribution! 

&lt;/details&gt;</content>
    <link href="https://gitlab.com/gitlab-org/gitlab-foss/-/releases/v17.9.0" rel="alternate"/>
  </entry>
  <entry>
    <id>https://gitlab.com/gitlab-org/gitlab-foss/-/releases/v17.10.0</id>
    <title>New release for GitLab: GitLab 17.10</title>
    <updated>2025-03-20T00:00:00+00:00</updated>
    <author>
      <name>gitlab-org/gitlab-foss</name>
    </author>
    <content>&lt;p&gt;&lt;img alt="18 new features" src="https://img.shields.io/static/v1?color=108548&amp;amp;label=new+features&amp;amp;labelColor=525252&amp;amp;message=18&amp;amp;style=for-the-badge" title="New features added in this release" /&gt;
&lt;img alt="2355 total badges" src="https://img.shields.io/static/v1?color=1F75CB&amp;amp;label=total+features&amp;amp;labelColor=525252&amp;amp;message=2355&amp;amp;style=for-the-badge" title="Total features" /&gt;&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;[Timestamps of when placeholder users were created](https://docs.gitlab.com/user/project/import/#placeholder-user-attributes): &lt;code&gt;Importers&lt;/code&gt;&lt;/summary&gt;

&gt; Previously, when you imported groups or projects, you could not see when [placeholder users](https://docs.gitlab.com/user/project/import/#placeholder-users) were created.
&gt; With this release, we've added timestamps so you can track the progress of your migration and troubleshoot any issues as they occur.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Bulk edit to-do items](https://docs.gitlab.com/user/todos/#bulk-edit-to-do-items): &lt;code&gt;Notifications&lt;/code&gt;&lt;/summary&gt;

&gt; You can now efficiently manage your To-Do List with our improved bulk editing feature. Select multiple to-do items and mark them as done or snooze them in one go, giving you more control over your tasks and helping you stay organized with less effort.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Snooze to-do items](https://docs.gitlab.com/user/todos/#snooze-to-do-items): &lt;code&gt;Notifications&lt;/code&gt;&lt;/summary&gt;

&gt; You can now snooze notifications in your To-Do List, allowing you to temporarily hide items and focus on what's most important right now. Whether you need an hour to concentrate or want to revisit a task tomorrow, you'll have fine-grained control over when notifications reappear, helping you manage your workflow more effectively.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Request reassignment by using a CSV file](https://docs.gitlab.com/user/project/import/#request-reassignment-by-using-a-csv-file): &lt;code&gt;Importers&lt;/code&gt;&lt;/summary&gt;

&gt; With this release, user contribution mapping now supports bulk reassignment by using a CSV file.
&gt; If you have a large user base with many placeholder users, group members with the Owner role can:
&gt; 
&gt; 1. Download a prefilled CSV template.
&gt; 1. Add GitLab usernames or public emails from the destination instance.
&gt; 1. Upload the completed file to reassign all contributions at once.
&gt; 
&gt; This method eliminates tedious manual reassignment through the UI.
&gt; To further streamline large-scale migrations, API support for CSV-based reassignment is now also available.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[New navigation experience for projects in Your Work](https://docs.gitlab.com/user/project/working_with_projects/): &lt;code&gt;Groups &amp; Projects&lt;/code&gt;&lt;/summary&gt;

&gt; We're excited to announce significant improvements to the project overview in **Your Work**, designed to streamline how you discover and access your projects. This update introduces a more intuitive tab-based navigation system that better reflects how users interact with their projects.
&gt; 
&gt; - The new **Contributed** tab (previously **Yours**) now displays all projects you've contributed to, including your personal projects, making it easier to track your development activity.
&gt; - Find your individual projects faster with the **Personal** tab, now prominently featured in the main navigation.
&gt; - Access team projects through the **Member** tab (formerly **All**), showing all projects where you have membership.
&gt; - The **Inactive** tab (previously **Pending deletion**) now provides a comprehensive view of both archived projects and those pending deletion.
&gt; 
&gt; Further, if you have the appropriate permissions, you can now edit or delete a project directly from the **Your Work** projects overview.
&gt; These changes reflect our commitment to creating a more efficient and user-friendly GitLab experience. The new layout helps you focus on the projects that matter most to your work, reducing the time spent navigating between different project categories.
&gt; 
&gt; We value your feedback on this update! Join the discussion in [epic 16662](https://gitlab.com/groups/gitlab-org/-/epics/16662) to share your experience with the new navigation system.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Improved project creation permission settings](https://docs.gitlab.com/administration/settings/visibility_and_access_controls/#define-which-roles-can-create-projects): &lt;code&gt;Groups &amp; Projects&lt;/code&gt;&lt;/summary&gt;

&gt; We've improved the project creation permission settings to make them more clear, intuitive, and aligned with our security principles. The improved settings include:
&gt; 
&gt; - Renamed the "Default project creation protection" dropdown to "Minimum role required for project creation" to clearly reflect the setting's purpose.
&gt; - Renamed the "Developers + Maintainers" dropdown option to "Developers" for consistency across the platform.
&gt; - Reordered the dropdown options from most restrictive to least restrictive access level.
&gt; 
&gt; These changes make it easier to understand and configure which roles can create projects within your groups, helping administrators enforce appropriate access controls more confidently.
&gt; 
&gt; Thank you [@yasuk](https://gitlab.com/yasuk) for this community contribution!

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/plan/"&gt;Plan&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Authenticate to private Pages with an access token](https://docs.gitlab.com/user/project/pages/pages_access_control/#authenticate-with-an-access-token): &lt;code&gt;Pages&lt;/code&gt;&lt;/summary&gt;

&gt; You can now authenticate to private GitLab Pages sites programmatically using access tokens, making it easier to automate interactions with your Pages content. Previously, accessing restricted Pages sites required interactive authentication through the GitLab UI.
&gt; 
&gt; This powerful enhancement increases productivity while maintaining security, giving developers more flexibility in how they interact with and distribute private Pages content.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[GitLab Query Language views Beta](https://docs.gitlab.com/user/glql/#glql-views): &lt;code&gt;Wiki&lt;/code&gt;, &lt;code&gt;Team Planning&lt;/code&gt;&lt;/summary&gt;

&gt; Tracking and understanding work in progress across GitLab previously required navigating multiple locations, reducing team efficiency and consuming valuable time.
&gt; 
&gt; This release introduces GitLab Query Language (GLQL) views Beta so you can create dynamic, real-time work tracking directly in your existing workflows.
&gt; 
&gt; GLQL views embed live data queries in Markdown code blocks throughout Wiki pages, epic descriptions, issue comments, and merge requests.
&gt; 
&gt; Previously available as an experiment, GLQL views now enter beta with support for sophisticated filtering using logical expressions and operators across key fields, including assignee, author, label, and milestone. You can customize your view's presentation as tables or lists, control which fields appear, and set result limits to create focused, actionable insights for your team.
&gt; 
&gt; Teams can now maintain context while accessing the information they need, creating shared understanding, and improving collaboration — all without leaving their current workflow.
&gt; 
&gt; [We welcome your feedback](https://gitlab.com/gitlab-org/gitlab/-/issues/509791) on GLQL views as we continue to enhance this feature.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Enhanced markdown experience](https://docs.gitlab.com/user/markdown/): &lt;code&gt;Markdown&lt;/code&gt;&lt;/summary&gt;

&gt; GitLab Flavored Markdown has been enhanced with several powerful improvements:
&gt; 
&gt; - **Improved math and image handling**:
&gt;   - Disable [math rendering](https://docs.gitlab.com/user/markdown/#math-equations) limits in your group or self-hosted instance to handle more complex mathematical expressions.
&gt;   - Control [image dimensions](https://docs.gitlab.com/user/markdown/#change-image-or-video-dimensions) precisely using pixel values or percentages to better manage content layout.
&gt; 
&gt; - **Enhanced editor experience**:
&gt;   - Continue lists automatically when pressing Enter/Return.
&gt;   - Shift text left or right using keyboard shortcuts.
&gt;   - Create clear term-definition pairs using description list syntax.
&gt;   - Adjust video widths flexibly.
&gt; 
&gt; - **Better content organization**:
&gt;   - Navigate content more easily with auto-expanding [summary quick views](https://docs.gitlab.com/user/markdown/#show-item-summary) (add `+s` to URLs).
&gt;   - See referenced [issue titles](https://docs.gitlab.com/user/markdown/#show-item-title) render automatically (add `+` to URLs).
&gt;   - Organize content modularly using [`include` syntax](https://docs.gitlab.com/user/markdown/#includes).
&gt;   - Create visually distinct callouts and warnings using [alert boxes](https://docs.gitlab.com/user/markdown/#alerts).
&gt; 
&gt; These improvements make GitLab Flavored Markdown more powerful for teams creating and maintaining documentation while offering greater flexibility in how content is presented and organized.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[New issues look now in beta](https://docs.gitlab.com/user/project/issues/issue_work_items/): &lt;code&gt;Team Planning&lt;/code&gt;&lt;/summary&gt;

&gt; Issues now share a common framework with epics and tasks, featuring real-time updates and workflow improvements:
&gt; 
&gt; * **Drawer view:** Open items from lists or boards in a drawer for quick viewing without leaving your current context. A button at the top lets you expand to full page view.
&gt; * **Change type:** Convert types between epics, issues, and tasks using the "Change type" action (replaces "Promote to epic")
&gt; * **Start date:** Issues now support start dates, aligning their functionality with epics and tasks.
&gt; * **Ancestry:** The complete hierarchy is above the title and the Parent field in the sidebar. To manage relationships, use the new [quick action](https://docs.gitlab.com/user/project/quick_actions/) commands `/set_parent`, `/remove_parent`, `/add_child`, and `/remove_child`.
&gt; * **Controls:** All actions are now accessible from the top menu (vertical ellipsis), which remains visible in the sticky header when scrolling.
&gt; * **Development:** All development items (merge requests, branches, and feature flags) related to an issue or task are now consolidated in a single, convenient list.
&gt; * **Layout:** UI improvements create a more seamless experience between issues, epics, tasks, and merge requests, helping you navigate your workflow more efficiently.
&gt; * **Linked items:** Create relationships between tasks, issues, and epics with improved linking options. Drag and drop to change link types and toggle the visibility of labels and closed items.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Description templates for epics, issues, tasks, objectives and key results](https://docs.gitlab.com/user/project/description_templates/): &lt;code&gt;Portfolio Management&lt;/code&gt;&lt;/summary&gt;

&gt; You can now streamline your workflow and maintain consistency across your projects with description templates for work items (epics, tasks, objectives, and key results).
&gt; 
&gt; This powerful addition allows you to create standardized templates, saving you time and ensuring all crucial information is included every time you create a new work item.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/create/"&gt;Create&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Ignore specific revisions in Git blame](https://docs.gitlab.com/user/project/repository/files/git_blame/#ignore-specific-revisions): &lt;code&gt;Source Code Management&lt;/code&gt;&lt;/summary&gt;

&gt; When browsing the history of a repository, there might be commits that aren't relevant to otherwise meaningful changes in the project. This can happen during:
&gt; 
&gt; - Refactors where you change from one library to another without changing functionality.
&gt; - Implementation of code formatters or linters that require standardizing the entire codebase.
&gt; 
&gt; When you look through the history of a project with `blame`, these kinds of commits make it difficult to understand the changes that occurred. Git supports identifying these commits with a `.git-blame-ignore-revs` file in your project. GitLab now allows you to toggle the blame view to show or hide these specific revisions in the "Blame preferences" dropdown list, making it easier to understand the history of your project.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/verify/"&gt;Verify&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[GitLab Runner 17.10](https://docs.gitlab.com/runner): &lt;code&gt;GitLab Runner Core&lt;/code&gt;&lt;/summary&gt;

&gt; We’re also releasing GitLab Runner 17.10 today! GitLab Runner is the highly-scalable build agent that runs your CI/CD jobs and sends the results back to a GitLab instance. GitLab Runner works in conjunction with GitLab CI/CD, the open-source continuous integration service included with GitLab.
&gt; 
&gt; #### What's new:
&gt; 
&gt; - [Perform Autoscaler executor health check before instance usage](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/38271)
&gt; - [Expand Docker executor volumes](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/38249)
&gt; - [Add Docker excecutor configuration for device addition for services](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/6208)
&gt; 
&gt; #### Bug Fixes:
&gt; 
&gt; - [The Windows `gitlab-runner-helper` image fails due to invalid volume specification for the `/opt/step-runner' path](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/38632)
&gt; - [Repository mirroring for RPM packages is not working properly in GitLab Runner 17.7.0 and later ](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/38409)
&gt; - [Running `git submodule update --remote` in GitLab CI/CD returns an error](https://gitlab.com/gitlab-org/gitlab/-/issues/359825)
&gt; 
&gt; The list of all changes is in the GitLab Runner [CHANGELOG](https://gitlab.com/gitlab-org/gitlab-runner/blob/17-10-stable/CHANGELOG.md).

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/package/"&gt;Package&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Docker Hub authentication for the dependency proxy](https://docs.gitlab.com/user/packages/dependency_proxy/#authenticate-with-docker-hub): &lt;code&gt;Container Registry&lt;/code&gt;&lt;/summary&gt;

&gt; The GitLab Dependency Proxy for container images now supports authentication with Docker Hub, helping you avoid pipeline failures due to rate limits and giving you access to private images.
&gt; 
&gt; Starting April 1, 2025, Docker Hub will enforce stricter pull limits (100 per 6-hour window per IPv4 address or IPv6 /64 subnet) for unauthenticated users. Without authentication, your pipelines might fail once these limits are reached.
&gt; 
&gt; With this release, you can configure Docker Hub authentication through the GraphQL API using your Docker Hub credentials, [personal access token](https://docs.docker.com/security/for-developers/access-tokens/), or [organization access tokens](https://docs.docker.com/security/for-admins/access-tokens/). Support for UI configuration will be available in GitLab 17.11.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/software_supply_chain_security/"&gt;Software supply chain security&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Wider distribution for token expiration notifications](https://docs.gitlab.com/user/group/manage/#expiry-emails-for-group-and-project-access-tokens): &lt;code&gt;System Access&lt;/code&gt;&lt;/summary&gt;

&gt; Previously, access token expiry notification emails were only sent to direct members of the group and project in which the token was expiring. Now, these notifications are also sent to inherited group and project members, if the setting is enabled. This wider distribution makes it easier to manage the token before expiry.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Identify and revoke tokens with token information API](https://docs.gitlab.com/api/admin/token/) &lt;i&gt;(self-managed only)&lt;/i&gt;: &lt;code&gt;System Access&lt;/code&gt;&lt;/summary&gt;

&gt; GitLab administrators can now use a unified API to identify and revoke tokens. Previously, administrators had to use endpoints related to the specific type of token. This API allows revocation regardless of the type. For a list of supported token types, see the [Token information API](https://docs.gitlab.com/api/admin/token/).
&gt; 
&gt; Thank you [Nicholas Wittstruck](https://gitlab.com/nwittstruck) and the team from Siemens for your contribution!

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Configurable token duration with GitLab OIDC provider](https://docs.gitlab.com/administration/auth/oidc/#configure-a-custom-duration-for-id-tokens) &lt;i&gt;(self-managed only)&lt;/i&gt;: &lt;code&gt;System Access&lt;/code&gt;&lt;/summary&gt;

&gt; When using GitLab as an OpenID Connect (OIDC) provider, you can now configure the duration of ID tokens with the `id_token_expiration` attribute. Previously, ID tokens had a fixed expiration time of 120 seconds.        
&gt; 
&gt; Thank you [Henry Sachs](https://gitlab.com/DerAstronaut) for your contribution!

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Extended webhook triggers for expiring tokens](https://docs.gitlab.com/user/group/manage/#add-additional-webhook-triggers-for-group-access-token-expiration): &lt;code&gt;System Access&lt;/code&gt;&lt;/summary&gt;

&gt; You can now trigger webhook events 60 and 30 days before a project or group access token expires. Previously, these webhook events only triggered 7 days before expiry. This is an optional setting that matches the existing email notification schedule for expiring tokens.

&lt;/details&gt;</content>
    <link href="https://gitlab.com/gitlab-org/gitlab-foss/-/releases/v17.10.0" rel="alternate"/>
  </entry>
  <entry>
    <id>https://gitlab.com/gitlab-org/gitlab-foss/-/releases/v17.11.0</id>
    <title>New release for GitLab: GitLab 17.11</title>
    <updated>2025-04-17T00:00:00+00:00</updated>
    <author>
      <name>gitlab-org/gitlab-foss</name>
    </author>
    <content>&lt;p&gt;&lt;img alt="22 new features" src="https://img.shields.io/static/v1?color=108548&amp;amp;label=new+features&amp;amp;labelColor=525252&amp;amp;message=22&amp;amp;style=for-the-badge" title="New features added in this release" /&gt;
&lt;img alt="2377 total badges" src="https://img.shields.io/static/v1?color=1F75CB&amp;amp;label=total+features&amp;amp;labelColor=525252&amp;amp;message=2377&amp;amp;style=for-the-badge" title="Total features" /&gt;&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;[Kubernetes 1.32 support](https://docs.gitlab.com/ee/user/clusters/agent/#supported-kubernetes-versions-for-gitlab-features): &lt;code&gt;Deployment Management&lt;/code&gt;&lt;/summary&gt;

&gt; This release adds full support for Kubernetes version 1.32, released in December 2024. If you deploy your apps to Kubernetes, you can now upgrade your connected clusters to the most recent version and take advantage of all its features.
&gt; 
&gt; You can read more about [our Kubernetes support policy and other supported Kubernetes versions](https://docs.gitlab.com/ee/user/clusters/agent/#supported-kubernetes-versions-for-gitlab-features).

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[All auto-disabled webhooks now automatically re-enable](https://docs.gitlab.com/user/project/integrations/webhooks/#auto-disabled-webhooks): &lt;code&gt;Webhooks&lt;/code&gt;&lt;/summary&gt;

&gt; With this release, webhooks that return `4xx` errors are now automatically re-enabled. All errors (`4xx`, `5xx`, or server errors) are treated the same way, allowing for more predictable behavior and easier troubleshooting. This change was announced in [this blog post](https://about.gitlab.com/blog/gitlab-webhooks-get-smarter-with-self-healing-capabilities/).
&gt; 
&gt; Failing webhooks are temporarily disabled for one minute, extending to a maximum of 24 hours. After a webhook fails 40 consecutive times, it now becomes permanently disabled.
&gt; 
&gt; Webhooks that were permanently disabled in GitLab 17.10 and earlier underwent a data migration.
&gt; 
&gt; - For GitLab.com, these changes apply automatically.
&gt; - For GitLab Self-Managed and GitLab Dedicated, these changes affect only those instances where the `auto_disabling_webhooks` `ops` flag is enabled.
&gt; 
&gt; Thanks to [Phawin](https://gitlab.com/lifez) for [this community contribution](https://gitlab.com/gitlab-org/gitlab/-/merge_requests/166329)!

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Ghost user contributions auto-mapped during imports](https://docs.gitlab.com/user/project/import/#user-contribution-and-membership-mapping): &lt;code&gt;Importers&lt;/code&gt;&lt;/summary&gt;

&gt; Previously, ghost user contributions would create placeholder references that required manual reassignment, creating extra work during migrations.
&gt; Now, importers using new [contributions and membership mapping functionality](https://docs.gitlab.com/user/project/import/#user-contribution-and-membership-mapping), migration by direct transfer, GitHub, Bitbucket Server and Gitea importers,
&gt; handle ghost user contributions more intelligently.
&gt; When importing content to GitLab, contributions previously made by the ghost user on
&gt; the source instance are now automatically mapped to the ghost user on the destination instance.
&gt; 
&gt; This enhancement eliminates the creation of unnecessary placeholder users for ghost user contributions,
&gt; reducing clutter in user mapping interface and simplifying the migration process.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Filter placeholder users in Admin area](https://docs.gitlab.com/administration/admin_area/#administering-users): &lt;code&gt;Importers&lt;/code&gt;&lt;/summary&gt;

&gt; Previously, placeholder users created during imports appeared mixed with regular users 
&gt; without clear distinction in the **Admin** area **Users** page.
&gt; 
&gt; With this release, administrators can now filter for placeholder accounts from the search box
&gt; in the **Users** page in the **Admin** area. To do this, select `Type` in the dropdown list,
&gt; then choose `Placeholder`.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Placeholder user limits appear in group usage quotas](https://docs.gitlab.com/user/project/import/#placeholder-user-limits): &lt;code&gt;Importers&lt;/code&gt;&lt;/summary&gt;

&gt; For imports to GitLab.com, placeholder users are limited per top-level group. These limits depend on your GitLab license and number of seats. With this release, it's possible to check your placeholder user usage and limits for a top-level group in the UI.
&gt; 
&gt; To view your current usage and limits:
&gt; 
&gt;   1. On the left sidebar, select **Search or go to** and find your group. This group must be at the top level.
&gt;   1. Select **Settings &gt; Usage Quotas**.
&gt;   1. Select the **Import** tab.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Linux package improvements](https://docs.gitlab.com/omnibus/) &lt;i&gt;(self-managed only)&lt;/i&gt;: &lt;code&gt;Omnibus Package&lt;/code&gt;&lt;/summary&gt;

&gt; In GitLab 18.0, the minimum-supported version of PostgreSQL will be version 16. To prepare for this change, on
&gt; instances that don't use [PostgreSQL Cluster](https://docs.gitlab.com/administration/postgresql/replication_and_failover/),
&gt; upgrades to GitLab 17.11 will attempt to automatically upgrade PostgreSQL to version 16.
&gt; 
&gt; If you use [PostgreSQL Cluster](https://docs.gitlab.com/administration/postgresql/replication_and_failover/) or [opt out of this automated upgrade](https://docs.gitlab.com/omnibus/settings/database/#opt-out-of-automatic-postgresql-upgrades), you must [manually upgrade to PostgreSQL 16](https://docs.gitlab.com/omnibus/settings/database/#upgrade-packaged-postgresql-server)
&gt; to be able to upgrade to GitLab 18.0.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/plan/"&gt;Plan&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Improved wiki sidebar styling](https://docs.gitlab.com/user/project/wiki/#customize-sidebar): &lt;code&gt;Wiki&lt;/code&gt;&lt;/summary&gt;

&gt; The custom wiki sidebar now features improved styling with reduced heading sizes and better left-padding for lists. These ergonomic enhancements improve the readability of custom navigation created through the `_sidebar` wiki page.
&gt;  
&gt;  Custom sidebars help teams organize their wiki content in a way that makes sense for their unique knowledge base structure. With this styling update, the sidebar is now easier to scan, creating a clearer visual hierarchy that helps team members find relevant information more quickly.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Display last comment as a column in GLQL views](https://docs.gitlab.com/user/glql/fields/#last-comment): &lt;code&gt;Wiki&lt;/code&gt;, &lt;code&gt;Team Planning&lt;/code&gt;&lt;/summary&gt;

&gt; GLQL views now support displaying the last comment on an issue or merge request as a column. By including `lastComment` as a field in your GLQL query, you can see the most recent updates without leaving your current context. 
&gt; 
&gt; Previously, you had to open each issue or merge request individually to view the last comment, which was time consuming and made it difficult to get a quick overview of progress. This improvement helps teams maintain momentum by providing at-a-glance visibility into ongoing conversations and status updates.
&gt; 
&gt; We welcome your feedback on this enhancement and GLQL views in general on our [feedback issue](https://gitlab.com/gitlab-org/gitlab/-/issues/509791).

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Nuxt project template for GitLab Pages](https://docs.gitlab.com/user/project/pages/getting_started/pages_new_project_template/): &lt;code&gt;Pages&lt;/code&gt;&lt;/summary&gt;

&gt; GitLab provides templates for the most popular Static Site Generators (SSGs), and you can now create a GitLab Pages site using Nuxt, a powerful framework built on Vue.js. Nuxt is particularly valuable for teams looking to build modern, performant web applications with less configuration overhead.
&gt; 
&gt; This addition expands your options for quickly launching a Pages site with built-in CI/CD pipelines and a modern development experience, without spending time on initial setup and configuration.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[New issue look now generally available](https://docs.gitlab.com/user/project/issues/issue_work_items/): &lt;code&gt;Team Planning&lt;/code&gt;&lt;/summary&gt;

&gt; As of this release, the new issue look is generally available and replaces the legacy issue experience. Issues now share a common framework with epics and tasks, featuring real-time updates and workflow improvements:
&gt; 
&gt; - **Drawer view:** You can open items from lists or boards in a drawer for quick viewing without leaving your current context. A button at the top lets you expand to a full-page view.
&gt; - **Change type:** Convert types between epics, issues, and tasks using the “Change type” action (replaces “Promote to epic”)
&gt; - **Start date:** Issues now support start dates, aligning their functionality with epics and tasks.
&gt; - **Ancestry:** The complete hierarchy is above the title and the Parent field in the sidebar. To manage relationships, use the new quick action commands `/set_parent`, `/remove_parent`, `/add_child`, and `/remove_child`.
&gt; - **Controls:** All actions are now accessible from the top menu (vertical ellipsis), which remains visible in the sticky header when scrolling.
&gt; - **Development:** All development items (merge requests, branches, and feature flags) related to an issue or task are now consolidated in a single, convenient list.
&gt; - **Layout:** UI improvements create a more seamless experience between issues, epics, tasks, and merge requests, helping you navigate your workflow more efficiently.
&gt; - **Linked items:** Create relationships between tasks, issues, and epics with improved linking options. Drag and drop to change link types and toggle the visibility of labels and closed items.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/create/"&gt;Create&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Extension marketplace for Web IDE on self-managed instances](https://docs.gitlab.com/administration/settings/vscode_extension_marketplace/): &lt;code&gt;Web IDE&lt;/code&gt;&lt;/summary&gt;

&gt; We're thrilled to announce the launch of the extension marketplace in the Web IDE for self-managed users. With the extension marketplace, you can discover, install, and manage third-party extensions to enhance your development experience. 
&gt; 
&gt; By default, the GitLab instance is configured to use the Open VSX extension registry. To activate this, follow the [enable with default extension registry](https://docs.gitlab.com/administration/settings/vscode_extension_marketplace/#enable-with-default-extension-registry) steps.
&gt; 
&gt; If you want to use your own or custom registry, you also have the option to [connect a custom extension registry](https://docs.gitlab.com/administration/settings/vscode_extension_marketplace/#customize-extension-registry). This provides you with more flexibility to manage available extensions.
&gt; 
&gt; After enabling the extension marketplace, individual users must still opt in to use it. They can do this by going to the **Integrations** section in their [Preferences](https://gitlab.com/-/profile/preferences) settings.
&gt; 
&gt; It's important to note that some extensions require a local runtime environment and are not compatible with the web-only version. Despite this, you can still choose from thousands of available extensions to boost your productivity and customize your workflow.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/verify/"&gt;Verify&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Improved pipeline graph visualization for failed jobs](https://docs.gitlab.com/ci/pipelines/#view-pipelines): &lt;code&gt;Pipeline Composition&lt;/code&gt;&lt;/summary&gt;

&gt; You can now quickly identify failed jobs in the pipeline graph with new visual indicators. Failed job groups are highlighted in the pipeline graph, and failed jobs are grouped at the top of each stage. This improved visualization helps you troubleshoot pipeline failures without having to search through complex pipeline structures.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Force-cancel CI/CD jobs stuck in canceling state](https://docs.gitlab.com/ci/jobs/#force-cancel-a-job): &lt;code&gt;Continuous Integration (CI)&lt;/code&gt;&lt;/summary&gt;

&gt; CI/CD jobs can occasionally get stuck in the 'canceling' state, blocking deployments or access to shared resources.
&gt; 
&gt; Users with the Maintainer [role](https://docs.gitlab.com/user/permissions/) can now force-cancel these stuck jobs directly from the job logs page, ensuring problematic jobs can be properly terminated.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Improved runner management in projects](https://docs.gitlab.com/ci/runners/runners_scope/#project-runners): &lt;code&gt;Fleet Visibility&lt;/code&gt;&lt;/summary&gt;

&gt; You can now manage runners more efficiently in your projects. Runners are displayed in a single-column layout and organized in their own lists instead of the previous two-column view.
&gt; 
&gt; This improved organization makes it simpler to find and manage runners, with new features including a list of assigned projects, runner managers, and jobs that a runner has run. For information about additional runner management improvements planned for GitLab 18.0, see [issue 33803](https://gitlab.com/gitlab-org/gitlab/-/issues/33803).

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[GitLab Runner 17.11](https://docs.gitlab.com/runner): &lt;code&gt;GitLab Runner Core&lt;/code&gt;&lt;/summary&gt;

&gt; We’re also releasing GitLab Runner 17.11 today! GitLab Runner is the highly-scalable build agent that runs your CI/CD jobs and sends the results back to a GitLab instance. GitLab Runner works in conjunction with GitLab CI/CD, the open-source continuous integration service included with GitLab.
&gt; 
&gt; #### What's new:
&gt; 
&gt; - [Code sign GitLab Runner Windows executables](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/2483)
&gt; 
&gt; #### Bug Fixes:
&gt; 
&gt; - [Cleaning Git configuration in GitLab Runner 17.10.0 results in an error](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/38681)
&gt; - [The `FF_DISABLE_UMASK_FOR_KUBERNETES_EXECUTOR` flag doesn't disable the `umask` command](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/38382)
&gt; 
&gt; The list of all changes is in the GitLab Runner [CHANGELOG](https://gitlab.com/gitlab-org/gitlab-runner/blob/17-11-stable/CHANGELOG.md).

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[CI/CD pipeline inputs](https://docs.gitlab.com/ci/inputs/#for-a-pipeline): &lt;code&gt;Pipeline Composition&lt;/code&gt;&lt;/summary&gt;

&gt; CI/CD variables are essential for dynamic CI/CD workflows, and are used for many things, including as environment variables, context variables, tool configuration, and matrix variables. But developers sometimes rely on CI/CD variables to inject [pipeline variables](https://docs.gitlab.com/ci/variables/#use-pipeline-variables) into pipelines to manually modify pipeline behavior, which have some risks due to the higher precedence of pipeline variables.
&gt; 
&gt; In GitLab 17.11 and later, you can now use `inputs` to safely modify pipeline behavior instead of using pipeline variables, including in scheduled pipelines, downstream pipelines, triggered pipelines, and other cases. Inputs provide developers with a more structured and flexible solution for injecting dynamic content at CI/CD job runtime. After you switch to inputs, you can completely [disable access to pipeline variables](https://docs.gitlab.com/ci/variables/#restrict-pipeline-variables).
&gt; 
&gt; We'd greatly appreciate it if you could try it out and share your feedback through this dedicated [issue](https://gitlab.com/gitlab-org/gitlab/-/issues/533802).

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/package/"&gt;Package&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Docker Hub authentication UI for the dependency proxy](https://docs.gitlab.com/user/packages/dependency_proxy/#authenticate-with-docker-hub): &lt;code&gt;Container Registry&lt;/code&gt;&lt;/summary&gt;

&gt; We're excited to announce UI support for Docker Hub authentication in the GitLab Dependency Proxy. This feature was initially introduced in GitLab 17.10 with GraphQL API support only, and now includes a user interface for easier configuration.
&gt; 
&gt; With this enhancement, you can now configure Docker Hub authentication directly from your group settings page, helping you:
&gt; 
&gt; * Avoid pipeline failures due to rate limits.
&gt; * Access private Docker Hub images.
&gt; * Store your Docker Hub credentials, [personal access token](https://docs.docker.com/security/for-developers/access-tokens/), or [organization access tokens](https://docs.docker.com/security/for-admins/access-tokens/) securely.
&gt; 
&gt; This streamlined approach makes it easier to maintain uninterrupted access to Docker Hub images in your CI/CD pipelines without using the GraphQL API.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Enhance security with protected container tags](https://docs.gitlab.com/user/packages/container_registry/protected_container_tags/): &lt;code&gt;Container Registry&lt;/code&gt;&lt;/summary&gt;

&gt; Container registries are critical infrastructure for modern DevSecOps teams. Until now, GitLab users with the Developer role or higher could push and delete any container tag in their projects, creating risks of accidental or unauthorized changes to production-critical container images.
&gt; 
&gt; With protected container tags, you now have fine-grained control over who can push or delete specific container tags. You can:
&gt; 
&gt; - Create up to five protection rules per project.
&gt; - Use RE2 regex patterns to protect tags like `latest`, semantic versions (for example, `v1.0.0`), or stable release tags (for example, `main-stable`).
&gt; - Restrict push and delete operations to Maintainer, Owner, or Administrator roles.
&gt; - Prevent protected tags from being removed by cleanup policies.
&gt; 
&gt; This feature requires the next-generation container registry, which is already enabled by default on GitLab.com. For GitLab Self-Managed instance, you'll need to enable the [metadata database](https://docs.gitlab.com/administration/packages/container_registry_metadata_database/) to use protected container tags.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Safeguard your registry with protected Maven packages](https://docs.gitlab.com/ee/user/packages/package_registry/package_protection_rules.html): &lt;code&gt;Package Registry&lt;/code&gt;&lt;/summary&gt;

&gt; We're thrilled to introduce support for protected Maven packages to enhance the security and stability of your GitLab package registry. Accidental modification of packages can disrupt the entire development process. With protected packages, you can safeguard your most important dependencies against unintended changes. 
&gt; 
&gt; In GitLab 17.11, you can now protect Maven packages by creating protection rules. If a package matches a protection rule, only specified users can push new versions of the package. Package protection rules prevent accidental overwrites, improve compliance with regulatory requirements, and reduce the need for manual oversight.
&gt; 
&gt; [Protected packages](https://gitlab.com/groups/gitlab-org/-/epics/5574) support for Maven and other package formats are all community contributions from `gerardo-navarro` and the Siemens crew. Thank you, Gerardo, and the rest of the crew from Siemens for their many contributions to GitLab! If you want to learn more about how Gerardo and the Siemens crew contributed this change, check out this [video](https://www.youtube.com/watch?v=5-nQ1_Mi7zg) in which Gerardo shares his learnings and best practices for contributing to GitLab based on his experience as an external contributor.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/software_supply_chain_security/"&gt;Software supply chain security&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Enhanced sorting options for access tokens](https://docs.gitlab.com/user/profile/personal_access_tokens/): &lt;code&gt;System Access&lt;/code&gt;&lt;/summary&gt;

&gt; There are now additional sorting options for access tokens in the UI and API. These sorting options complement GitLab's existing token management capabilities, giving you more control over your access token inventory, and helping you better maintain access token security. The new sorting options include:
&gt; 
&gt; - Sort by expiration date (ascending): View the tokens that expire soonest.
&gt; - Sort by expiration date (descending): View the tokens with the longest remaining lifetime.
&gt; - Sort by last used date (ascending): View the tokens that have not been used recently.
&gt; - Sort by last used date (descending): View the tokens used most recently.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/security_risk_management/"&gt;Security risk management&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Store and filter a `source` value for CI/CD jobs](https://docs.gitlab.com/api/jobs/#view-the-source-of-a-job): &lt;code&gt;Security Policy Management&lt;/code&gt;&lt;/summary&gt;

&gt; GitLab 17.11 introduces a new feature that allows users to verify the origin of build artifacts by tracking the source attribute of CI/CD jobs. This enhancement is particularly valuable for security and compliance workflows. For example, organizations can implement software supply chain security measures or require verifiable evidence of security scans for compliance purposes.
&gt; 
&gt; Jobs in GitLab now store and display a `source` value that identifies whether they originated from:
&gt; 
&gt; - A scan execution policy
&gt; - A pipeline execution policy
&gt; - A regular pipeline
&gt; 
&gt; You can access the `source` attribute on the **Build** &gt; **Jobs** page with a new filter option, using the Jobs API, or through the ID token `claims` for artifact verification.
&gt; 
&gt; With this new feature, you can now:
&gt; 
&gt; - Verify the authenticity of security scan results.
&gt; - Filter jobs by source type to quickly identify policy-enforced scans.
&gt; - Implement cryptographic verification of artifacts using the new ID token claims.
&gt; - Ensure compliance requirements are met with proper audit trails.
&gt; 
&gt; Security and compliance teams can leverage this feature to:
&gt; 
&gt; - View only policy-enforced jobs using the new filter on the Jobs page.
&gt; - Automate tasks by accessing the `source` field in the Jobs API.
&gt; - Implement artifact verification using the new ID token claims:
&gt; 
&gt;   - `job_source`: Identifies the job's origin.
&gt;   - `job_policy_ref_uri`: Points to the policy file (for policy-defined jobs).
&gt;   - `job_policy_ref_sha`: Contains the git commit SHA of the policy.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/monitor/"&gt;Monitor&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Pre-deployment opt-out toggle to disable event data sharing](https://docs.gitlab.com/administration/settings/event_data/): &lt;code&gt;Application Instrumentation&lt;/code&gt;&lt;/summary&gt;

&gt; In GitLab 18.0, we plan to enable event-level product usage data collection from GitLab Self-Managed and GitLab Dedicated instances. Unlike aggregated data, event-level data provides GitLab with deeper insights into usage, allowing us to improve user experience on the platform and increase feature adoption.
&gt; 
&gt; Starting in GitLab 17.11, you will have the ability to opt out of event data collection before it starts, effectively allowing you to choose participation in advance. For more information and details on how to opt-out please see our documentation.

&lt;/details&gt;</content>
    <link href="https://gitlab.com/gitlab-org/gitlab-foss/-/releases/v17.11.0" rel="alternate"/>
  </entry>
  <entry>
    <id>https://gitlab.com/gitlab-org/gitlab-foss/-/releases/v18.0.0</id>
    <title>New release for GitLab: GitLab 18.0</title>
    <updated>2025-05-15T00:00:00+00:00</updated>
    <author>
      <name>gitlab-org/gitlab-foss</name>
    </author>
    <content>&lt;p&gt;&lt;img alt="16 new features" src="https://img.shields.io/static/v1?color=108548&amp;amp;label=new+features&amp;amp;labelColor=525252&amp;amp;message=16&amp;amp;style=for-the-badge" title="New features added in this release" /&gt;
&lt;img alt="2393 total badges" src="https://img.shields.io/static/v1?color=1F75CB&amp;amp;label=total+features&amp;amp;labelColor=525252&amp;amp;message=2393&amp;amp;style=for-the-badge" title="Total features" /&gt;&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;[Improved pod status visualizations in the dashboard for Kubernetes](https://docs.gitlab.com/ci/environments/kubernetes_dashboard)&lt;/summary&gt;

&gt; You can use the dashboard for Kubernetes to monitor your deployed applications. Until now, pods with container errors like `CrashLoopBackOff` or `ImagePullBackOff` were displayed with a "Pending" or "Running" status, which makes it difficult to identify problematic deployments without using `kubectl`. 
&gt; 
&gt; In GitLab 18.0, error states in the UI show a specific container's status, similar to the `kubectl` output. Now, you can quickly identify and troubleshoot failing pods without leaving the GitLab interface.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Support for multiple workspaces in the GitLab for Slack app](https://docs.gitlab.com/administration/settings/slack_app/#enable-support-for-multiple-workspaces) &lt;i&gt;(self-managed only)&lt;/i&gt;: &lt;code&gt;Integrations&lt;/code&gt;&lt;/summary&gt;

&gt; The GitLab for Slack app now supports multiple workspaces for GitLab Self-Managed and GitLab Dedicated customers. Enabling multiple workspaces allows organizations with federated Slack environments to maintain seamless GitLab integrations across all their workspaces. To enable support for multiple workspaces, configure the GitLab for Slack app as an [unlisted distributed app](https://api.slack.com/distribution#unlisted-distributed-apps). 

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Delete groups and placeholder users](https://docs.gitlab.com/user/project/import/#placeholder-user-deletion): &lt;code&gt;Importers&lt;/code&gt;&lt;/summary&gt;

&gt; In GitLab 18.0, when you delete a top-level group, placeholder users associated with the group are deleted as well. If placeholder users are associated with other projects, they are only removed from the top-level group. 
&gt; This way, unnecessary placeholder users are removed without disrupting the history or attributions of other projects.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[GitLab chart 9.0 released with breaking changes](https://docs.gitlab.com/charts/releases/9_0/) &lt;i&gt;(self-managed only)&lt;/i&gt;: &lt;code&gt;Cloud Native Installation&lt;/code&gt;, &lt;code&gt;Omnibus Package&lt;/code&gt;&lt;/summary&gt;

&gt; * [Breaking change](https://docs.gitlab.com/update/deprecations/#postgresql-14-and-15-no-longer-supported): Support for PostgreSQL 14 and 15 has been removed. Make sure you are running PostgreSQL 16 before upgrading.
&gt; * [Breaking change](https://docs.gitlab.com/update/deprecations/#major-update-of-the-prometheus-subchart): The bundled Prometheus chart was updated from 15.3 to 27.11. Along with the Prometheus chart upgrade, the Prometheus version was updated from 2.38 to 3.0. Manual steps are required to perform the upgrade. If you have Alertmanager, Node Exporter, or Pushgateway enabled, you must also update your Helm values. For more information, see the [migration guide](https://docs.gitlab.com/charts/releases/9_0.html#prometheus-upgrade).
&gt; * [Breaking change](https://docs.gitlab.com/update/deprecations/#fallback-support-for-gitlab-nginx-chart-controller-image-v131): The default NGINX controller image was updated from version 1.3.1 to 1.11.2. If you're using the GitLab NGINX chart, and you have set your own NGINX RBAC rules, new RBAC rules must exist. For more information, see the [upgrade guide](https://docs.gitlab.com/charts/releases/8_0/#upgrade-to-86x-851-843-836) for more information.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Deletion protection available for all users](https://docs.gitlab.com/administration/settings/visibility_and_access_controls/#deletion-protection): &lt;code&gt;Groups &amp; Projects&lt;/code&gt;&lt;/summary&gt;

&gt; Project and group delayed deletion is now available for all GitLab users, including those on our Free tier. This essential safety feature adds a grace period (7 days on GitLab.com) before deleted groups and projects are permanently removed. This feature allows recovery from accidental deletions without complex recovery operations.
&gt; 
&gt; By making data safety a core feature, GitLab can help better protect your work against data loss events.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Delayed project deletion for user namespaces](https://docs.gitlab.com/user/project/working_with_projects/#delayed-project-deletion): &lt;code&gt;Groups &amp; Projects&lt;/code&gt;&lt;/summary&gt;

&gt; Delayed project deletion is now available for projects in user namespaces (personal projects). Previously, this safeguard against accidental data loss was only available for group namespaces. When you delete a project in your user namespace, it will now enter a "pending deletion" state for the duration configured in your instance settings (7 days on GitLab.com), rather than being immediately deleted. This creates a recovery window during which you can restore the project if needed.
&gt; 
&gt; We hope this enhancement provides greater peace of mind when managing your personal projects in GitLab.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[New `active` parameter for Groups and Projects REST APIs](https://docs.gitlab.com/api/projects/#list-projects): &lt;code&gt;Groups &amp; Projects&lt;/code&gt;&lt;/summary&gt;

&gt; We've added a new `active` parameter to our Groups and Projects REST APIs that simplifies filtering groups based on their status. When set to `true`, only non-archived groups or projects not marked for deletion are returned. When set to `false`, only archived groups or projects marked for deletion are returned. If the parameter is undefined, no filtering is applied. This enhancement helps you efficiently manage your workflows by targeting specific statuses through simple API calls.
&gt; 
&gt; Thank you [@dagaranupam](https://gitlab.com/dagaranupam) for adding this parameter to the Projects API.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/plan/"&gt;Plan&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[GitLab Query Language views enhancements](https://docs.gitlab.com/user/glql/): &lt;code&gt;Wiki&lt;/code&gt;, &lt;code&gt;Team Planning&lt;/code&gt;&lt;/summary&gt;

&gt; We've made significant improvements to GitLab Query Language (GLQL) views. These improvements include support for:
&gt; 
&gt; - The `&gt;=` and `&lt;=` operators for all date types
&gt; - The **View actions** dropdown in views
&gt; - The **Reload** action
&gt; - Field aliases
&gt; - Aliasing columns to a custom name in GLQL tables
&gt;         
&gt; We welcome your feedback on this enhancement, and on GLQL views in general, in [issue 509791](https://gitlab.com/gitlab-org/gitlab/-/issues/509791).

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Pages template improvements](https://docs.gitlab.com/user/project/pages/getting_started/pages_new_project_template/#project-templates): &lt;code&gt;Pages&lt;/code&gt;&lt;/summary&gt;

&gt; GitLab provides [templates for popular static site generators](https://gitlab.com/pages). We've taken a deep dive into available templates using a scoring framework, and refined the list to include only the most popular templates.
&gt; 
&gt; Refining templates available for GitLab Pages streamlines the website creation process. Use templates to launch professional-looking sites with minimal technical expertise. Enhanced templates also provide modern, responsive designs, eliminating the need for custom development work.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/create/"&gt;Create&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[View open merge requests targeting files](https://docs.gitlab.com/user/project/repository/files/#view-open-merge-requests-for-a-file): &lt;code&gt;Source Code Management&lt;/code&gt;&lt;/summary&gt;

&gt; Previously, when working on code files, you had no visibility into who else might be modifying
&gt; the same file in other branches. This lack of awareness led to merge conflicts, duplicated work,
&gt; and inefficient collaboration.
&gt; 
&gt; Now you can easily identify all open merge requests that modify the file you're viewing in the
&gt; repository. This feature helps you:
&gt; 
&gt; - Identify potential merge conflicts before they happen.
&gt; - Avoid duplicating work that's already in progress.
&gt; - Improve collaboration by providing visibility into in-flight changes.
&gt; 
&gt; A badge displays the number of open merge requests modifying the file, and hovering over it
&gt; reveals a popover with the list of these merge requests.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/verify/"&gt;Verify&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[New CI/CD analytics view for projects in limited availability](https://docs.gitlab.com/user/analytics/ci_cd_analytics/): &lt;code&gt;Fleet Visibility&lt;/code&gt;&lt;/summary&gt;

&gt; The redesigned CI/CD analytics view transforms how your development teams analyze, monitor, and optimize pipeline performance
&gt; and reliability. Developers can access intuitive visualizations in the GitLab UI that reveal performance
&gt; trends and reliability metrics. Embedding these insights in your project repository eliminates context-switching
&gt; that disrupts developer flow. Teams can identify and address pipeline bottlenecks that drain productivity.
&gt; This enhancement leads to faster development cycles, improved collaboration, and data-driven confidence to optimize your
&gt; CI/CD workflows in GitLab.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[GitLab Runner 18.0](https://docs.gitlab.com/runner): &lt;code&gt;GitLab Runner Core&lt;/code&gt;&lt;/summary&gt;

&gt; We’re also releasing GitLab Runner 18.0 today! GitLab Runner is the highly-scalable build agent that runs your CI/CD jobs and sends the results back to a GitLab instance. GitLab Runner works in conjunction with GitLab CI/CD, the open-source continuous integration service included with GitLab.
&gt; 
&gt; #### What's new:
&gt; 
&gt; - [Add `ConfigurationError` and `ExitCodeInvalidConfiguration` to the GitLab Runner build error classifications](https://gitlab.com/gitlab-org/gitlab/-/issues/514297)
&gt; - [Improve cloud provider error messages for failed cache uploads to cloud storage](https://gitlab.com/gitlab-org/gitlab-runner/-/merge_requests/5527)
&gt; 
&gt; #### Bug Fixes:
&gt; 
&gt; - [GitLab Runner can use cached images even when disallowed](https://gitlab.com/gitlab-org/gitlab-runner/-/issues/38706)
&gt; 
&gt; The list of all changes is in the GitLab Runner [CHANGELOG](https://gitlab.com/gitlab-org/gitlab-runner/blob/18-0-stable/CHANGELOG.md).

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/application_security_testing/"&gt;Application security testing&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Security scanners now support MR pipelines](https://docs.gitlab.com/ee/user/application_security/detect/roll_out_security_scanning.html#use-security-scanning-tools-with-merge-request-pipelines): &lt;code&gt;API Security&lt;/code&gt;, &lt;code&gt;Container Scanning&lt;/code&gt;, &lt;code&gt;DAST&lt;/code&gt;, &lt;code&gt;Fuzz Testing&lt;/code&gt;, &lt;code&gt;SAST&lt;/code&gt;, &lt;code&gt;Secret Detection&lt;/code&gt;, &lt;code&gt;Software Composition Analysis&lt;/code&gt;&lt;/summary&gt;

&gt; You can now choose to run [Application Security Testing (AST) scanners](https://docs.gitlab.com/ee/user/application_security/detect/) in [merge request (MR) pipelines](https://docs.gitlab.com/ee/ci/pipelines/merge_request_pipelines.html).
&gt; To minimize the impact to your pipelines, this is as an opt-in behavior you can control.
&gt; 
&gt; Previously, the default behavior depended on whether you used the [Stable or Latest CI/CD template edition](https://docs.gitlab.com/user/application_security/detect/security_configuration/#template-editions) to enable a scanner:
&gt; 
&gt; - In Stable templates, scan jobs ran in branch pipelines only. MR pipelines weren't supported.
&gt; - In Latest templates, scan jobs ran in MR pipelines when an MR was open, and ran in branch pipelines if there was no associated MR. You couldn't control this behavior.
&gt; 
&gt; Now, a new option, `AST_ENABLE_MR_PIPELINES`, allows you to control whether to run jobs in MR pipelines.
&gt; The default behavior for both Stable and Latest templates remains the same. Specifically:
&gt; 
&gt; - Stable templates continue to run scan jobs in branch pipelines by default, but you can set `AST_ENABLE_MR_PIPELINES: "true"` to use MR pipelines instead when an MR is open.
&gt; - Latest templates continue to run scan jobs in MR pipelines by default when an MR is open, but you can set `AST_ENABLE_MR_PIPELINES: "false"` to use branch pipelines instead.
&gt; 
&gt; This improvement affects all security scanning templates except for API Discovery (`API-Discovery.gitlab-ci.yml`), which currently defaults to MR pipelines.
&gt; We also changed the API Discovery template to align with other Stable templates in GitLab 18.0 and use branch pipeline by default.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/software_supply_chain_security/"&gt;Software supply chain security&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Limit maximum user session length](https://docs.gitlab.com/administration/settings/account_and_limit_settings/#set-sessions-to-expire-from-creation-date) &lt;i&gt;(self-managed only)&lt;/i&gt;: &lt;code&gt;System Access&lt;/code&gt;&lt;/summary&gt;

&gt; Administrators can now choose if the maximum length of a user session is computed from the initial sign-in or from the last activity. Users are notified that the session is ending, but cannot prevent the session from expiring or extend the session. This feature is disabled by default.
&gt; 
&gt; Thank you [John Parent](https://gitlab.kitware.com/john.parent) for your contribution!

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Granular permissions for job tokens in beta](https://docs.gitlab.com/ci/jobs/fine_grained_permissions/): &lt;code&gt;Permissions&lt;/code&gt;&lt;/summary&gt;

&gt; Pipeline security just got more flexible. Job tokens are ephemeral credentials that provide access to resources in pipelines. Until now, these tokens inherited full permissions from the user, often resulting in unnecessarily broad access capabilities.
&gt; 
&gt; With our new [fine-grained permissions for job tokens](https://docs.gitlab.com/ee/ci/jobs/fine_grained_permissions.html) beta feature, you can now precisely control which specific resources a job token can access within a project. This allows you to implement the principle of least privilege in your CI/CD workflows, granting only the minimal access necessary for each job to complete its tasks.
&gt; 
&gt; We're actively seeking community feedback on this feature. If you have questions, want to share your implementation experience, or would like to engage directly with our team about potential improvements, please visit our [feedback issue](https://gitlab.com/gitlab-org/gitlab/-/issues/519575).

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/monitor/"&gt;Monitor&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Event data collection](https://docs.gitlab.com/administration/settings/event_data/) &lt;i&gt;(self-managed only)&lt;/i&gt;: &lt;code&gt;Application Instrumentation&lt;/code&gt;&lt;/summary&gt;

&gt; In GitLab 18.0, we are enabling event-level product usage data collection from GitLab Self-Managed and GitLab Dedicated instances. Unlike aggregated data, event-level data provides GitLab with deeper insights into usage, allowing us to improve user experience on the platform and increase feature adoption. For detailed instructions on how to adjust data sharing settings, please refer to our documentation.

&lt;/details&gt;</content>
    <link href="https://gitlab.com/gitlab-org/gitlab-foss/-/releases/v18.0.0" rel="alternate"/>
  </entry>
  <entry>
    <id>https://gitlab.com/gitlab-org/gitlab-foss/-/releases/v18.1.0</id>
    <title>New release for GitLab: GitLab 18.1</title>
    <updated>2025-06-19T00:00:00+00:00</updated>
    <author>
      <name>gitlab-org/gitlab-foss</name>
    </author>
    <content>&lt;p&gt;&lt;img alt="8 new features" src="https://img.shields.io/static/v1?color=108548&amp;amp;label=new+features&amp;amp;labelColor=525252&amp;amp;message=8&amp;amp;style=for-the-badge" title="New features added in this release" /&gt;
&lt;img alt="2401 total badges" src="https://img.shields.io/static/v1?color=1F75CB&amp;amp;label=total+features&amp;amp;labelColor=525252&amp;amp;message=2401&amp;amp;style=for-the-badge" title="Total features" /&gt;&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;[New `accessLevels` argument for `projectMembers` in GraphQL API](https://docs.gitlab.com/api/graphql/reference/#projectprojectmembers): &lt;code&gt;Groups &amp; Projects&lt;/code&gt;&lt;/summary&gt;

&gt; We're excited to announce the addition of the `accessLevels` argument to the `projectMembers` field in our GraphQL API. Use this argument to filter project members by access level directly from an API call. Previously, you had to fetch an entire list of project members and apply filters locally, which added significant computational overhead. Now, analyzing project permissions and generating ownership graphs is faster and more resource-efficient. This enhancement is particularly valuable to organizations managing large-scale deployments with complex permission structures.

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/create/"&gt;Create&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[Enhanced merge request review experience with review panel](https://docs.gitlab.com/user/project/merge_requests/reviews/#submit-a-review): &lt;code&gt;Code Review Workflow&lt;/code&gt;&lt;/summary&gt;

&gt; When you review a merge request, it can be valuable to see all of the comments and feedback you've provided before you submit your review. Previously, this experience was fragmented between the final comment and an additional pop-up to see your pending comments, making it hard to get the complete overview.
&gt; 
&gt; When conducting code reviews, you can now access a dedicated drawer that consolidates all your pending draft comments in one organized view. The enhanced review panel moves the review submission interface to a more accessible location, and provides a numbered badge showing your pending comment count. When you open the panel, you'll see all your draft comments organized in a scrollable list, making it easier to review and manage your feedback before submitting.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[View downstream pipeline job logs in VS Code](https://docs.gitlab.com/editor_extensions/visual_studio_code/cicd/): &lt;code&gt;Editor Extensions&lt;/code&gt;&lt;/summary&gt;

&gt; The GitLab Workflow extension for VS Code now displays job logs from downstream pipelines directly in your editor. Previously, viewing logs from child pipelines required switching to the GitLab web interface.
&gt; 
&gt; This feature was developed through the [GitLab Co-create program](https://about.gitlab.com/community/co-create/). Special thanks to Tim Ryan for making this contribution!

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/verify/"&gt;Verify&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[GitLab Runner 18.1](https://docs.gitlab.com/runner): &lt;code&gt;GitLab Runner Core&lt;/code&gt;&lt;/summary&gt;

&gt; We're also releasing GitLab Runner 18.1 today! GitLab Runner is the highly-scalable build agent that runs your CI/CD jobs and sends the results back to a GitLab instance. GitLab Runner works in conjunction with GitLab CI/CD, the open-source continuous integration service included with GitLab.
&gt; 
&gt; #### Bug Fixes:
&gt; 
&gt; - [If you upgrade to GitLab 17.10 or 17.11, runners might receive a `404` response when they request jobs](https://gitlab.com/gitlab-org/gitlab/-/issues/543351).
&gt; 
&gt; The list of all changes is in the GitLab Runner [CHANGELOG](https://gitlab.com/gitlab-org/gitlab-runner/blob/18-1-stable/CHANGELOG.md).

&lt;/details&gt;

&lt;h5&gt;&lt;a href="https://about.gitlab.com/stages-devops-lifecycle/software_supply_chain_security/"&gt;Software supply chain security&lt;/a&gt;&lt;/h5&gt;
&lt;details&gt;&lt;summary&gt;[View inactive personal access tokens](https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html): &lt;code&gt;System Access&lt;/code&gt;&lt;/summary&gt;

&gt; GitLab automatically deactivates access tokens after they expire or are revoked. You can now review these inactive tokens. Previously, access tokens were no longer visible after they became inactive. This change enhances traceability and security of these token types.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Filter for bot and human users](https://docs.gitlab.com/administration/moderate_users/#view-users-by-type) &lt;i&gt;(self-managed only)&lt;/i&gt;: &lt;code&gt;System Access&lt;/code&gt;&lt;/summary&gt;

&gt; Established GitLab instances can often have large numbers of human and bot users. You can now filter the users list in the Admin area by user type. Filtering users can help you:
&gt; 
&gt; - Quickly identify and manage human users separately from automated accounts.
&gt; - Perform targeted administrative actions on specific user types.
&gt; - Simplify user auditing and management workflows.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[ORCID identifier in user profile](https://docs.gitlab.com/user/profile/): &lt;code&gt;User Profile&lt;/code&gt;&lt;/summary&gt;

&gt; GitLab now supports ORCID identifiers in user profiles, making GitLab more accessible and valuable for researchers and the academic community. [ORCID](https://orcid.org/) (Open Researcher and Contributor ID) provides researchers with a persistent digital identifier that distinguishes them from other researchers and supports automated linkages between researchers and their professional activities, ensuring their work is properly recognized.
&gt; 
&gt; This feature was developed as a community contribution by Thomas Labalette and Erwan Hivin, master students at Artois University, under the supervision of [Daniel Le Berre](https://www.ouvrirlascience.fr/appointment-of-daniel-le-berre-as-the-national-coordinator-for-higher-education-and-research-software-forges-in-france/), addressing a long-standing request from the academic community.

&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;[Achieve SLSA Level 1 compliance with CI/CD components](https://docs.gitlab.com/ci/pipelines/pipeline_security/#sign-and-verify-slsa-provenance-with-a-cicd-component): &lt;code&gt;Artifact Security&lt;/code&gt;&lt;/summary&gt;

&gt; You can now achieve [SLSA](https://slsa.dev/) Level 1 compliance using GitLab's new CI/CD components for signing and verifying SLSA-compliant [artifact provenance metadata](https://docs.gitlab.com/ci/runners/configure_runners/#artifact-provenance-metadata) generated by GitLab Runner. The components wrap [Sigstore Cosign functionality](https://docs.gitlab.com/ee/ci/yaml/signing_examples.html) in reusable modules that can be easily integrated into CI/CD workflows.

&lt;/details&gt;</content>
    <link href="https://gitlab.com/gitlab-org/gitlab-foss/-/releases/v18.1.0" rel="alternate"/>
  </entry>
</feed>
