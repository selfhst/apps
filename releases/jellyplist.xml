<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://selfh.st/apps</id>
  <title>Jellyplist Releases</title>
  <updated>2025-06-25T12:35:13.747931-04:00</updated>
  <author>
    <name>selfh.st</name>
    <email>contact@selfh.st</email>
  </author>
  <link href="https://selfh.st/apps" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <subtitle>Self-hosted software releases generated by selfh.st</subtitle>
  <entry>
    <id>https://github.com/kamilkosek/jellyplist/releases/tag/0.1.6</id>
    <title>New release for Jellyplist: Release 0.1.6</title>
    <updated>2024-11-26T10:54:45-05:00</updated>
    <author>
      <name>kamilkosek/jellyplist</name>
    </author>
    <content>&lt;h1&gt;Whats up in Jellyplist 0.1.6?&lt;/h1&gt;
&lt;h3&gt;üÜïBetter Linking (in preparation for Lidarr integration)&lt;/h3&gt;
&lt;p&gt;During the link-task &lt;code&gt;(update_jellyfin_id_for_downloaded_tracks)&lt;/code&gt;, where Jellyplist tries to link a &lt;code&gt;Spotify-Track-Id&lt;/code&gt; to a &lt;code&gt;Jellyfin-Track-Id&lt;/code&gt; it performs now a search and tries to find a best match from the results also considering quality aspects of a file. 
You can also make use of &lt;code&gt;ffprobe&lt;/code&gt;, so jellyplist get¬¥s more  detailed information about the quality profile of a file. 
To use &lt;code&gt;ffprobe&lt;/code&gt; set the environment variable &lt;code&gt;FIND_BEST_MATCH_USE_FFPROBE&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; otherwise jellyplist will use quality information provided by the Jellyfin API.
Fixes #14&lt;/p&gt;
&lt;p&gt;In the Debug logs it will look like this:
&lt;code&gt;log
find_best_match_from_jellyfin() ]   DEBUG - Quality score for track Smalltown Boy: 4410.866669999999 [/storage/media/music/Bronski Beat/The Age of Reason (2017)/CD 01/Bronski Beat - The Age of Reason - 05 - Smalltown Boy.flac]
find_best_match_from_jellyfin() ]   DEBUG - Quality score for track Smalltown Boy: 4100.6 [/storage/media/music/Bronski Beat/The Age of Consent (1984)/CD 01/Bronski Beat - The Age of Consent - 06 - Smalltown Boy.flac]
find_best_match_from_jellyfin() ]   DEBUG - Quality score for track Smalltown Boy: 3240.48 [/storage/media/music/__jellyplist/5vmRQ3zELMLUQPo2FLQ76x.mp3]&lt;/code&gt;
&lt;strong&gt;What¬¥s the benefit?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Once a day, the task &lt;code&gt;update_jellyfin_id_for_downloaded_tracks&lt;/code&gt; will do a full update on all tracks. This way you can listen to tracks and make use of the playlists until Lidarr provides you the same track but with better audio quality. &lt;/p&gt;
&lt;h3&gt;üÜïAdded REFRESH_LIBRARIES_AFTER_DOWNLOAD_TASK&lt;/h3&gt;
&lt;p&gt;When setting the new environment variable &lt;code&gt;REFRESH_LIBRARIES_AFTER_DOWNLOAD_TASK&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; , jellyplist will trigger a music library update on your Jellyfin server, in case you dont have &lt;code&gt;Realtime Monitoring&lt;/code&gt; enabled on your Jellyfin library.
Fixes #10&lt;/p&gt;
&lt;h3&gt;üÜïRemoved cookies.txt requirement&lt;/h3&gt;
&lt;p&gt;No need to use &lt;code&gt;cookies.txt&lt;/code&gt; file to download tracks via spotDL&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!IMPORTANT]
Not using a cookies.txt file will limit the bitrate of downloaded tracks to &lt;code&gt;128kbit/s&lt;/code&gt; üìª&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;üÜïAdded LOG_LEVEL&lt;/h3&gt;
&lt;p&gt;Via the environment variable  &lt;code&gt;LOG_LEVEL&lt;/code&gt; you can control the log output  now. The default python log levels are available: 
- CRITICAL 
- FATAL 
- ERROR 
- WARNING 
- INFO 
- DEBUG 
- NOTSET&lt;/p&gt;
&lt;h3&gt;üÜïAdded the possibility for admins to release task lock¬¥s&lt;/h3&gt;
&lt;p&gt;When a task will crash or whatsoever , the lock won¬¥t be released and you have to wait for it to expire until you can run it manually. Now you can release it manually, in case you need it. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!IMPORTANT]
You must be logged in as an admin&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;üÜïAdded the possibility for admins to remove playlists completely&lt;/h3&gt;
&lt;p&gt;This way the playlist will be removed from "monitoring" and also be removed from jellyfin. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!IMPORTANT]
You must be logged in as an admin&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;üÜïAllow manual track re-linking&lt;/h3&gt;
&lt;p&gt;In case something went wrong and you want to assign another Jellyfin track to a Spotify-Track-Id you can do it now manually. 
Just go to "View Playlist Details", in the table where the tracks are listed, hold the &lt;code&gt;CTRL&lt;/code&gt; Key while clicking on the Play from Jellyfin button. You will be presented with the search modal and can choose whatever track you like. 
Fixex #13&lt;/p&gt;
&lt;h3&gt;üÜïAdded a badge on the lower left corner indicating the current version&lt;/h3&gt;
&lt;h3&gt;‚öíÔ∏èOverall improvements in logging&lt;/h3&gt;
&lt;p&gt;Changed log format and also added debug logging where (I think) it¬¥s appropriate.&lt;/p&gt;
&lt;h3&gt;üêõ Bugfixes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fixed a bug where playlists weren¬¥t updated until the &lt;code&gt;snapshot-id&lt;/code&gt; of a playlist changed. Fixes #9&lt;/li&gt;
&lt;li&gt;Fixed a dependency error, which caused &lt;code&gt;chromaprint&lt;/code&gt; fingerprinting to error out. Fixes #12 &lt;/li&gt;
&lt;li&gt;Fixed a paging error, which caused that only the first 100 elements of a playlists were added&lt;/li&gt;
&lt;/ul&gt;</content>
    <link href="https://github.com/kamilkosek/jellyplist/releases/tag/0.1.6" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/kamilkosek/jellyplist/releases/tag/0.1.7</id>
    <title>New release for Jellyplist: Release 0.1.7</title>
    <updated>2024-12-04T19:01:54-05:00</updated>
    <author>
      <name>kamilkosek/jellyplist</name>
    </author>
    <content>&lt;h1&gt;Whats up in Jellyplist 0.1.7?&lt;/h1&gt;
&lt;h3&gt;Major overhaul&lt;/h3&gt;
&lt;p&gt;I¬¥ve been working the past week to make this project work again, after &lt;a href="https://developer.spotify.com/blog/2024-11-27-changes-to-the-web-api"&gt;Spotify announced to deprecate&lt;/a&gt; the playlist discover API¬¥s , which were a crucial part of this project.
I also took this opportunity at the same time to do a major overhaul, on how Jellyplist gathers data from a music provider. Music provider API implementations must now implement defined abstract classes to work with Jellyplist, think of it like &lt;em&gt;plugins&lt;/em&gt;. Jellyplist now, in theory, can gather data from any music provider - just the &lt;em&gt;plugins&lt;/em&gt; must be written. It also doesn¬¥t matter, if it have 1,2 or 10 Music Providers to playlists. So stay tuned for more to come. 
The next ones will be Deezer and YTM&lt;/p&gt;
&lt;p&gt;After the providers will be implemented, I will at some point do the same with the media backend - so Jellyplist will be able to support other media backends like Navidrome, Plex, Emby and so on...&lt;/p&gt;
&lt;h3&gt;üÜïNew API Implementation for Spotify&lt;/h3&gt;
&lt;p&gt;As mentioned above, I needed a new way to get playlists. 
Now, to get them , you don¬¥t need an API Key to authenticate, you even don¬¥t need to be authenticated at all. If you like to have Playlists recommended or created for you, you can use authentication via a cookie. 
To do this, add a env var to you &lt;code&gt;.env&lt;/code&gt; file:
&lt;code&gt;bash
SPOTIFY_COOKIE_FILE = '/jellyplist/spotify-cookie.txt'&lt;/code&gt;
And map the cookie from your local filesystem to the container path you¬¥ve set in the &lt;code&gt;.env&lt;/code&gt;file
&lt;code&gt;yaml
...
...
 volumes:
      - /your/local/path/open.spotify.com_cookies.txt:${SPOTIFY_COOKIE_FILE}
...
...&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;üÜïLidarr integration is here&lt;/h3&gt;
&lt;p&gt;To enable the Lidarr integration add these to your &lt;code&gt;.env&lt;/code&gt; file
```bash
LIDARR_API_KEY = aabbccddeeffgghh11223344 # self explaining
LIDARR_URL = http://&lt;your_lidarr_ip&gt;:8686 # too
LIDARR_MONITOR_ARTISTS = false # If false, only the corresponding&lt;/p&gt;
&lt;h1&gt;album will be set to monitored in lidarr, if true the whole artist&lt;/h1&gt;
&lt;h1&gt;will be set as monitored. Be careful in the beginning as you might&lt;/h1&gt;
&lt;h1&gt;hammer your lidarr instance and you indexers. Defaults to false&lt;/h1&gt;
&lt;p&gt;``` 
After you enabled Lidarr integration, make sure to go to &lt;em&gt;"Admin -&amp;gt; Lidarr"&lt;/em&gt; and set the default quality profile and music root folder.&lt;/p&gt;
&lt;p&gt;With the Lidarr integration you get a nice workflow:
1. Add Playlist
2. Playlist gets downloaded via SpotDL and is available after some time
3. At some point (every hour on x:50) the requests to Lidarr are made.
4. Lidarr gets all files.
5. Once a day Jellyplist is doing a full update on all tracks, and searches for the same track but with a better quality profile.&lt;/p&gt;
&lt;h3&gt;‚ö†Ô∏è New required env var&lt;/h3&gt;
&lt;p&gt;Ensure to add &lt;code&gt;MUSIC_STORAGE_BASE_PATH&lt;/code&gt; to your &lt;code&gt;.env&lt;/code&gt; file. 
```bash
MUSIC_STORAGE_BASE_PATH = '/storage/media/music' # The base path where&lt;/p&gt;
&lt;h1&gt;your music library is located.&lt;/h1&gt;
&lt;h1&gt;Must be the same value as your music library in jellyfin&lt;/h1&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;h3&gt;Other changes, improvements and fixes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;UI/UX: The index page now has content. From there you can directly drop a playlist link&lt;/li&gt;
&lt;li&gt;UI/UX: The Search bar now works with the new API implementation&lt;/li&gt;
&lt;li&gt;UI/UX: A new &lt;code&gt;Browse All&lt;/code&gt; (per Music Provider) Page from where you can discover playlists&lt;/li&gt;
&lt;li&gt;UI/UX: Check technical details on a track. Just doubleclick a row in the details view of a playlist.&lt;/li&gt;
&lt;li&gt;UI/UX: Allow to link a track even it¬¥s not marked as downloaded. &lt;/li&gt;
&lt;li&gt;UI/UX: Reworked celery task management and the /admin/tasks UI&lt;/li&gt;
&lt;/ul&gt;</content>
    <link href="https://github.com/kamilkosek/jellyplist/releases/tag/0.1.7" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/kamilkosek/jellyplist/releases/tag/0.1.8</id>
    <title>New release for Jellyplist: Release 0.1.8</title>
    <updated>2024-12-05T19:50:45-05:00</updated>
    <author>
      <name>kamilkosek/jellyplist</name>
    </author>
    <content>&lt;h1&gt;Whats up in Jellyplist 0.1.8?&lt;/h1&gt;
&lt;p&gt;Not much this time, just some small fixes and one enhancement.&lt;/p&gt;
&lt;h3&gt;üÜïJellyplist now checks for updates&lt;/h3&gt;
&lt;p&gt;Jellyplist now checks the GitHub releases for new version. 
If a new version is available, you will notice the small badge on the lower left will pulsate slighty, so you don¬¥t miss any new release :smile:&lt;/p&gt;
&lt;p&gt;If you don¬¥t like that Jellyplist is doing this, you can opt out by setting this env var in your &lt;code&gt;.env&lt;/code&gt; file
&lt;code&gt;bash
CHECK_FOR_UPDATES = false&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Other changes, improvements and fixes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fix for #30 , where the output path for spotDL wasn¬¥t created correctly&lt;/li&gt;
&lt;/ul&gt;</content>
    <link href="https://github.com/kamilkosek/jellyplist/releases/tag/0.1.8" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/kamilkosek/jellyplist/releases/tag/v0.1.9</id>
    <title>New release for Jellyplist: Release v0.1.9</title>
    <updated>2024-12-13T18:20:41-05:00</updated>
    <author>
      <name>kamilkosek/jellyplist</name>
    </author>
    <content>&lt;h1&gt;Whats up in Jellyplist v0.1.9?&lt;/h1&gt;
&lt;h2&gt;‚ö†Ô∏è BREAKING CHANGE: docker-compose.yml&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;[!WARNING]
In this release I¬¥ve done some rework so now the setup is a bit easier, because you don¬¥t have to spin up the -worker -beat container, these are now all in the default container and managed via supervisor. This means you have to update your &lt;code&gt;docker-compose.yml&lt;/code&gt; when updating! &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So now your compose file should look more or less like this&lt;/p&gt;
&lt;p&gt;```yaml
services:
  redis:
    image: redis:7-alpine
    container_name: redis
    volumes:
      - redis_data:/data
    networks:
      - jellyplist-network
  postgres:
    container_name: postgres-jellyplist
    image: postgres:17.2
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /data/postgres
    volumes:
       - /jellyplist_pgdata/postgres:/data/postgres
    networks:
      - jellyplist-network
    restart: unless-stopped&lt;/p&gt;
&lt;p&gt;jellyplist:
    container_name: jellyplist
    image: ${IMAGE}
    depends_on: 
      - postgres
      - redis
    ports:
      - "5055:5055"
    networks:
      - jellyplist-network
    volumes:
      - /jellyplist/cookies.txt:/jellyplist/cookies.txt
      - /jellyplist/open.spotify.com_cookies.txt:/jellyplist/spotify-cookie.txt
      - ${MUSIC_STORAGE_BASE_PATH}:${MUSIC_STORAGE_BASE_PATH}
      - /my/super/cool/storage/jellyplist/settings.yaml:/jellyplist/settings.yaml
    env_file:
      - .env&lt;/p&gt;
&lt;p&gt;networks:
  jellyplist-network:
    driver: bridge&lt;/p&gt;
&lt;p&gt;volumes:
    postgres:
    redis_data:
&lt;code&gt;And the `.env` File&lt;/code&gt;env
IMAGE = ghcr.io/kamilkosek/jellyplist:latest
POSTGRES_USER = jellyplist
POSTGRES_PASSWORD = jellyplist
SECRET_KEY = supersecretkey  # Secret key for session management
JELLYFIN_SERVER_URL = http://&lt;jellyfin_server&gt;:8096  # Default to local Jellyfin server
JELLYFIN_ACCESS_TOKEN = &lt;jellyfin access token&gt;
JELLYFIN_ADMIN_USER = &lt;jellyfin admin username&gt;
JELLYFIN_ADMIN_PASSWORD = &lt;jellyfin admin password&gt;
SPOTIFY_CLIENT_ID = &lt;spotify client id&gt;
SPOTIFY_CLIENT_SECRET = &lt;spotify client secret&gt;
JELLYPLIST_DB_HOST = postgres-jellyplist
JELLYPLIST_DB_USER = jellyplist
JELLYPLIST_DB_PASSWORD = jellyplist
LOG_LEVEL = INFO
LIDARR_API_KEY = &lt;lidarr api key&gt;
LIDARR_URL = http://&lt;lidarr server&gt;:8686
LIDARR_MONITOR_ARTISTS = false
SPOTIFY_COOKIE_FILE = '/jellyplist/spotify-cookie.txt'
MUSIC_STORAGE_BASE_PATH = '/storage/media/music'&lt;/p&gt;
&lt;p&gt;``` &lt;/p&gt;
&lt;h3&gt;üÜï Log Viewer&lt;/h3&gt;
&lt;p&gt;Under the &lt;code&gt;Admin&lt;/code&gt;  Page there is now a tab called &lt;code&gt;Logs&lt;/code&gt; from where you can view the current logs, change the log-level on demand and copy a prepared markdown snippet ready to be pasted into a GitHub issue. &lt;/p&gt;
&lt;h3&gt;üÜï New env var¬¥s, a bit more control over spotDL&lt;/h3&gt;
&lt;h4&gt;&lt;code&gt;SPOTDL_PROXY&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Set a Proxy for spotDL. See &lt;a href="https://spotdl.readthedocs.io/en/latest/usage/#command-line-options"&gt;https://spotdl.readthedocs.io/en/latest/usage/#command-line-options&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;SPOTDL_OUTPUT_FORMAT&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Set the output folder and file name format for downloaded tracks via spotDL. Not all variables, which are supported by spotDL are supported by Jellyplist. 
- &lt;code&gt;{title}&lt;/code&gt;
- &lt;code&gt;{artist}&lt;/code&gt;
- &lt;code&gt;{artists}&lt;/code&gt;
- &lt;code&gt;{album}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This way you will have a bit more controler over how the files are stored. 
The complete output path is joined from &lt;code&gt;MUSIC_STORAGE_BASE_PATH&lt;/code&gt; and &lt;code&gt;SPOTDL_OUTPUT_FORMAT&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;em&gt;Example:&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MUSIC_STORAGE_BASE_PATH = /storage/media/music&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and &lt;/p&gt;
&lt;p&gt;&lt;code&gt;SPOTDL_OUTPUT_FORMAT = /{artist}/{album}/{title}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The Track is &lt;em&gt;All I Want for Christmas Is You by Mariah Carey&lt;/em&gt; this will result in the following folder structure:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/storage/media/music/Mariah Carey/Merry Christmas/All I Want for Christmas Is You.mp3&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;üÜï Admin Users can now add Playlists to multiple Users&lt;/h3&gt;
&lt;p&gt;Sometimes I want to add a playlist to several users at once, because it¬¥s either a &lt;em&gt;generic&lt;/em&gt;  one or because my wife doesn¬¥t want to bother with the technical stuff üò¨
So now, when logged in as an admin user, when adding a playlist you can select users from your Jellyfin server which will also receive it. 
Under &lt;code&gt;Admin&lt;/code&gt; you can also select users which will be preselected by default. These will be stored in the file &lt;code&gt;settings.yaml&lt;/code&gt;. 
You can or should map this file to a file outside the container, so it will persist accross image updates (see compose sample above)&lt;/p&gt;
&lt;h3&gt;üÜï New &lt;code&gt;env&lt;/code&gt; var &lt;code&gt;QUALITY_SCORE_THRESHOLD&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Get a better control over the &lt;code&gt;update_jellyfin_id_for_downloaded_tracks()&lt;/code&gt; behaviour. 
Until now this tasks performed a &lt;strong&gt;full update&lt;/strong&gt; every 24h: This means, every track from every playlist was searched through the Jellyfin API with the hope of finding the same track but with a better quality. While this is ok and works fine for small libraries, this tasks eats a lot of power on large libraries and also takes time.
So there is now the new &lt;code&gt;env&lt;/code&gt; variable  &lt;code&gt;QUALITY_SCORE_THRESHOLD&lt;/code&gt; (default: &lt;code&gt;1000.0&lt;/code&gt;). When a track was once found with a quality score above 1000.0, Jellyplist wont try to perform another &lt;code&gt;quality update&lt;/code&gt; anymore on this track.
In order to be able to classify it a little better, here are a few common quality scores: 
- spotDL downloaded track without yt-music premium: &lt;code&gt;&amp;lt; 300&lt;/code&gt;
- spotDL downloaded track &lt;strong&gt;with&lt;/strong&gt; yt-music premium: &lt;code&gt;&amp;lt; 450&lt;/code&gt;
- flac &lt;code&gt;&amp;gt; 1000&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!TIP]
Want to know what quality score (and many other details) a track has ? Just double-click the table row in the playlist details view to get all the info¬¥s! &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Other changes, improvements and fixes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fix for #38 and #22 , where the manual task starting was missing a return value&lt;/li&gt;
&lt;li&gt;Fixed an issue where the content-type of a playlist cover image, would cause the Jellyfin API Client to fail. Thanks @artyorsh&lt;/li&gt;
&lt;li&gt;Fixed missing lock keys to task manager and task status rendering&lt;/li&gt;
&lt;li&gt;Pinned postgres version to 17.2&lt;/li&gt;
&lt;li&gt;Enhanced error logging in tasks&lt;/li&gt;
&lt;li&gt;several fixes and improvements for the Jellyfin API Client&lt;/li&gt;
&lt;/ul&gt;</content>
    <link href="https://github.com/kamilkosek/jellyplist/releases/tag/v0.1.9" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/kamilkosek/jellyplist/releases/tag/v0.1.10</id>
    <title>New release for Jellyplist: Release v0.1.10</title>
    <updated>2025-02-12T03:37:04-05:00</updated>
    <author>
      <name>kamilkosek/jellyplist</name>
    </author>
    <content>&lt;p&gt;No changelog available for this release.&lt;/p&gt;
&lt;h2&gt;What's Changed&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;make docker image slimmer by @Ofirfr in https://github.com/kamilkosek/jellyplist/pull/66&lt;/li&gt;
&lt;li&gt;spotDL exec command debug log by @Ofirfr in https://github.com/kamilkosek/jellyplist/pull/67&lt;/li&gt;
&lt;li&gt;add CACHE_REDIS_HOST as env variable to config.py by @Daniel-Boluda in https://github.com/kamilkosek/jellyplist/pull/71&lt;/li&gt;
&lt;li&gt;main to dev by @kamilkosek in https://github.com/kamilkosek/jellyplist/pull/75&lt;/li&gt;
&lt;li&gt;Dev by @kamilkosek in https://github.com/kamilkosek/jellyplist/pull/74&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;@Ofirfr made their first contribution in https://github.com/kamilkosek/jellyplist/pull/66&lt;/li&gt;
&lt;li&gt;@Daniel-Boluda made their first contribution in https://github.com/kamilkosek/jellyplist/pull/71&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Full Changelog&lt;/strong&gt;: https://github.com/kamilkosek/jellyplist/compare/v0.1.9...v0.1.10&lt;/p&gt;</content>
    <link href="https://github.com/kamilkosek/jellyplist/releases/tag/v0.1.10" rel="alternate"/>
  </entry>
</feed>
