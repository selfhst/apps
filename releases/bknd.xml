<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://selfh.st/apps</id>
  <title>bknd Releases</title>
  <updated>2025-07-12T21:35:04.908316-04:00</updated>
  <author>
    <name>selfh.st</name>
    <email>contact@selfh.st</email>
  </author>
  <link href="https://selfh.st/apps" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <subtitle>Self-hosted software releases generated by selfh.st</subtitle>
  <entry>
    <id>https://github.com/bknd-io/bknd/releases/tag/v0.11.2</id>
    <title>New release for bknd: v0.11.2</title>
    <updated>2025-04-22T09:55:33-04:00</updated>
    <author>
      <name>bknd-io/bknd</name>
    </author>
    <content>&lt;h2&gt;What's Changed&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;remove unused useTheme import and add loading state for entity detail view by @dswbx in https://github.com/bknd-io/bknd/pull/154&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Full Changelog&lt;/strong&gt;: https://github.com/bknd-io/bknd/compare/v0.11.1...v0.11.2&lt;/p&gt;</content>
    <link href="https://github.com/bknd-io/bknd/releases/tag/v0.11.2" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/bknd-io/bknd/releases/tag/v0.12.0</id>
    <title>New release for bknd: v0.12.0</title>
    <updated>2025-05-01T04:31:50-04:00</updated>
    <author>
      <name>bknd-io/bknd</name>
    </author>
    <content>&lt;h2&gt;Generate Types (https://github.com/bknd-io/bknd/pull/166)&lt;/h2&gt;
&lt;p&gt;Whether you define your data structure using the prototype functions or prefer to visually construct it using the Admin UI, you can now let bknd generate types for all your entities by running:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sh
npx bknd types&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Make sure to include the generated type definition to your &lt;code&gt;tsconfig.json&lt;/code&gt;:
&lt;code&gt;jsonc
{
  // ...
  "include": ["bknd-types.d.ts", /* ... */]
}&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Bcrypt hashing (https://github.com/bknd-io/bknd/pull/147)&lt;/h2&gt;
&lt;p&gt;Along with the previous options of "plain" and "sha256", you can now use "bcrypt" as your password strategy hash:
&lt;img alt="CleanShot 2025-05-01 at 10 26 17" src="https://github.com/user-attachments/assets/978aab89-8af9-4376-92df-89a52085e683" /&gt;&lt;/p&gt;
&lt;h2&gt;Media permissions (https://github.com/bknd-io/bknd/pull/142)&lt;/h2&gt;
&lt;p&gt;Security is important, and so now when having the Guard enabled, your users' role must include permissions to read, list, upload and delete media files. If you had an admin role with &lt;code&gt;implicit_allow&lt;/code&gt; enabled, the new permissions are applied automatically. &lt;/p&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;cleanup: replace console.log/warn with $console, remove commented-out code by @dswbx in https://github.com/bknd-io/bknd/pull/141&lt;/li&gt;
&lt;li&gt;adjust typebox imports and enable TS incremental by @dswbx in https://github.com/bknd-io/bknd/pull/146&lt;/li&gt;
&lt;li&gt;update admin basepath handling and window context integration by @dswbx in https://github.com/bknd-io/bknd/pull/155&lt;/li&gt;
&lt;li&gt;update dependencies in package.json by @dswbx in https://github.com/bknd-io/bknd/pull/156&lt;/li&gt;
&lt;li&gt;add validation logs and improve data validation handling by @dswbx in https://github.com/bknd-io/bknd/pull/157&lt;/li&gt;
&lt;li&gt;modify MediaApi to support custom fetch implementation, defaults to native fetch by @dswbx in https://github.com/bknd-io/bknd/pull/158&lt;/li&gt;
&lt;li&gt;trigger repository-find-[one|many]-[before|after] based on limit by @dswbx in https://github.com/bknd-io/bknd/pull/160&lt;/li&gt;
&lt;li&gt;refactor error handling in authenticator and password strategy by @dswbx in https://github.com/bknd-io/bknd/pull/161&lt;/li&gt;
&lt;li&gt;add disableSubmitOnError prop to NativeForm and export getFlashMessage by @dswbx in https://github.com/bknd-io/bknd/pull/162&lt;/li&gt;
&lt;li&gt;update imports to adjust nodeTestRunner path and remove unused export by @dswbx in https://github.com/bknd-io/bknd/pull/163&lt;/li&gt;
&lt;li&gt;fix sync events not awaited by @dswbx in https://github.com/bknd-io/bknd/pull/164&lt;/li&gt;
&lt;li&gt;Dropzone: extract DropzoneInner and unify state management with zustand by @dswbx in https://github.com/bknd-io/bknd/pull/165&lt;/li&gt;
&lt;li&gt;replace LiquidJs rendering with simplified renderer by @dswbx in https://github.com/bknd-io/bknd/pull/167&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Full Changelog&lt;/strong&gt;: https://github.com/bknd-io/bknd/compare/v0.11.2...v0.12.0&lt;/p&gt;</content>
    <link href="https://github.com/bknd-io/bknd/releases/tag/v0.12.0" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/bknd-io/bknd/releases/tag/v0.13.0</id>
    <title>New release for bknd: v0.13.0</title>
    <updated>2025-05-27T10:55:14-04:00</updated>
    <author>
      <name>bknd-io/bknd</name>
    </author>
    <content>&lt;h2&gt;Custom JSON Schema &amp;amp; integrated OpenAPI (https://github.com/bknd-io/bknd/pull/172, https://github.com/bknd-io/bknd/pull/173)&lt;/h2&gt;
&lt;p&gt;This was quite a biggie. Since bknd fully relies on JSON Schema, the available libraries to work with it weren't all that pleasant to work with. Either they only include a validator (&lt;code&gt;@cfworker/json-schema&lt;/code&gt;, &lt;code&gt;json-schema-library&lt;/code&gt;) or are tied to another use-case (&lt;code&gt;@sinclair/typebox&lt;/code&gt;, &lt;code&gt;zod&lt;/code&gt;) adding JSON Schema as an after thought. &lt;/p&gt;
&lt;p&gt;But implementing native MCP support and visual workflows that are even more reliant on JSON Schema, this wasn't acceptable anymore. That's why I went ahead creating my own implementation: &lt;a href="https://github.com/dswbx/jsonv-ts"&gt;jsonv-ts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It has a zod-inspired API but strictly targeting JSON Schema as the main priority. It also includes a validator that is currently passing 74% of the ~2000 tests provided by the official test suite – but since it produces clean JSON Schema, any validator can be used. Additional integrated features are:
* Automatic and customizable coercion (required for &lt;code&gt;SearchParams&lt;/code&gt;)
* Property-level customizable, additional validation
* Hono middleware to validate targets such as query, json, form, parameters, etc.
* Automatic OpenAPI generation for routes that use the middleware&lt;/p&gt;
&lt;p&gt;Not everything JSON Schema related has been moved over yet, only all route validations and one of the most complex schema which is the recursive repository query. So now every instance has full OpenAPI specs with the current user automatically authenticated:&lt;/p&gt;
&lt;p&gt;https://github.com/user-attachments/assets/4c70c9f0-0240-4d8a-9624-9370bfc68783&lt;/p&gt;
&lt;h2&gt;API: Custom Storage Support (https://github.com/bknd-io/bknd/pull/174)&lt;/h2&gt;
&lt;p&gt;You can now instantiate an &lt;code&gt;Api&lt;/code&gt; instance with a custom &lt;code&gt;storage&lt;/code&gt; option to store the auth state in whatever storage you'd like (&lt;code&gt;localStorage&lt;/code&gt; compatible API):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;typescript
export type ApiOptions = {
    storage?: {
        getItem: (key: string) =&amp;gt; string | undefined | null | Promise&amp;lt;string | undefined | null&amp;gt;;
        setItem: (key: string, value: string) =&amp;gt; void | Promise&amp;lt;void&amp;gt;;
        removeItem: (key: string) =&amp;gt; void | Promise&amp;lt;void&amp;gt;;
    };
    // ...
}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This option may also be passed via ClientProvider:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tsx
&amp;lt;ClientProvider storage={window.localStorage} /&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Helpful for using a custom client side storage such as local storage or browser storage (when used in a chrome extension).&lt;/p&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;admin: data/auth route-driven settings and collapsible components by @dswbx in https://github.com/bknd-io/bknd/pull/168&lt;/li&gt;
&lt;li&gt;remove batching workaround for Turso AWS endpoints by @dswbx in https://github.com/bknd-io/bknd/pull/171&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Full Changelog&lt;/strong&gt;: https://github.com/bknd-io/bknd/compare/v0.12.0...v0.13.0&lt;/p&gt;</content>
    <link href="https://github.com/bknd-io/bknd/releases/tag/v0.13.0" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/bknd-io/bknd/releases/tag/v0.14.0</id>
    <title>New release for bknd: v0.14.0</title>
    <updated>2025-06-12T05:12:58-04:00</updated>
    <author>
      <name>bknd-io/bknd</name>
    </author>
    <content>&lt;h2&gt;Initial UUID support (https://github.com/bknd-io/bknd/pull/183)&lt;/h2&gt;
&lt;p&gt;As much as I like the simplicity of auto incrementing integers as primary key, there are cases where a UUID is more suitable. To make this implementation database independent, the UUIDs are computed on the application layer using UUID v7 to maintain sorting by primary key. &lt;/p&gt;
&lt;p&gt;When you're creating a new entity, you can choose the primary key type:&lt;/p&gt;
&lt;p&gt;https://github.com/user-attachments/assets/79e17efe-f785-4754-9f61-ae7febb6c4be&lt;/p&gt;
&lt;p&gt;Alternatively, you can overwrite the default primary key type by heading to the advances settings: Top right Avatar ➝ Settings ➝ Data ➝ Default Primary Format:&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="https://github.com/user-attachments/assets/45287b1a-aba4-46ff-94b9-dad8e2ebab5e" /&gt;&lt;/p&gt;
&lt;h2&gt;Postgres: choose between &lt;code&gt;pg&lt;/code&gt;, &lt;code&gt;postgres&lt;/code&gt; or create your own (https://github.com/bknd-io/bknd/pull/182)&lt;/h2&gt;
&lt;p&gt;There several ways to connect to your Postgres database, and so bknd shouldn't put a limit on that. You can now choose to connect using &lt;code&gt;pg&lt;/code&gt;, &lt;code&gt;postgres&lt;/code&gt; or create your own based on a kysely dialect!&lt;/p&gt;
&lt;p&gt;```typescript
import { pg, postgresJs } from "@bknd/postgres";&lt;/p&gt;
&lt;p&gt;const usingPg = pg({ connectionString: "postgresql://..." });
const usingPostgresJs = postgresJs("postgresql://...");
```&lt;/p&gt;
&lt;p&gt;Postgres offerings such as Neon and Xata have their own serverless driver. You can now create your custom Postgres connection by just specifying the kysely dialect:&lt;/p&gt;
&lt;p&gt;```typescript
import { createCustomPostgresConnection } from "@bknd/postgres";
import { CustomPostgresDialect } from "&lt;somewhere&gt;";&lt;/p&gt;
&lt;p&gt;const custom = createCustomPostgresConnection(CustomPostgresDialect);
const connection = custom({ /&lt;em&gt; your dialects constructor args &lt;/em&gt;/ });
```&lt;/p&gt;
&lt;p&gt;See the &lt;a href="https://docs.bknd.io/usage/database#postgresql"&gt;Postgres docs&lt;/a&gt;, the package overview or examples for &lt;a href="https://github.com/bknd-io/bknd/blob/main/packages/postgres/examples/neon.ts"&gt;neon&lt;/a&gt; and &lt;a href="https://github.com/bknd-io/bknd/blob/main/packages/postgres/examples/xata.ts"&gt;xata&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Added Cloudflare D1 Read Replication (https://github.com/bknd-io/bknd/pull/181)&lt;/h2&gt;
&lt;p&gt;Cloudflare D1 now offers &lt;a href="https://developers.cloudflare.com/d1/best-practices/read-replication/"&gt;read replication&lt;/a&gt; (currently in beta) to reduce read latency. This works by starting a D1 session with a specific bookmark. You can now turn this on:&lt;/p&gt;
&lt;p&gt;```typescript
import { serve } from "bknd/adapter/cloudflare";&lt;/p&gt;
&lt;p&gt;export default serve({
   mode: "fresh", // recommended
   d1: {
      session: true,
   }
});
```&lt;/p&gt;
&lt;p&gt;Note that you have to enable read replication on your D1 instance first in order for this to take effect. &lt;a href="https://docs.bknd.io/integration/cloudflare#d1-sessions-experimental"&gt;Read more on the docs&lt;/a&gt; how to tune the settings.&lt;/p&gt;
&lt;h2&gt;Docs: Added &lt;code&gt;bknd.config.ts&lt;/code&gt; (https://github.com/bknd-io/bknd/pull/180)&lt;/h2&gt;
&lt;p&gt;There has been quite an update on the docs on how to extend bknd using &lt;a href="https://docs.bknd.io/extending/config"&gt;&lt;code&gt;bknd.config.ts&lt;/code&gt;&lt;/a&gt;. The configuration file is meant as a single entry point for your app as well as the CLI. With the CLI, you can spin up an instance without starting your app, add or change users, and in the future perform even more actions. To make sure both connect to the same source, the config file comes in handy.&lt;/p&gt;
&lt;p&gt;It also allows to have a central point where to specify &lt;a href="https://docs.bknd.io/extending/events"&gt;event listeners&lt;/a&gt; and additional route configuration. For every app event, you inject your custom logic and specify whether to block the execution (&lt;code&gt;sync&lt;/code&gt;) flow or not (&lt;code&gt;async&lt;/code&gt;). This allows to e.g. add custom checks and abort an update of an entry if the given condition is not met. &lt;/p&gt;
&lt;p&gt;```typescript
// bknd.config.ts
import { DatabaseEvents } from "bknd/data";
import type { BkndConfig } from "bknd/adapter";&lt;/p&gt;
&lt;p&gt;export default {
   // ...
   onBuilt: async (app) =&amp;gt; {
      app.emgr.onEvent(
         DatabaseEvents.MutatorUpdateBefore,
         async (event) =&amp;gt; {
            const { entity, entityId, data } = event.params;
            console.log(&lt;code&gt;Updating ${entity.name} #${entityId} with&lt;/code&gt;, data);
         },
         "sync", // or "async" if you don't want to block the update
      );
   },
} as const satisfies BkndConfig;
```&lt;/p&gt;
&lt;p&gt;Since this logic is placed in &lt;code&gt;bknd.config.ts&lt;/code&gt; this listener will also be executed when you run &lt;code&gt;npx bknd run&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;repo chores: fixed root dir, removed unused class, added .env.example by @dswbx in https://github.com/bknd-io/bknd/pull/176&lt;/li&gt;
&lt;li&gt;fix: lock hono version because of changed header setting in 4.7.7 by @dswbx in https://github.com/bknd-io/bknd/pull/179&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Full Changelog&lt;/strong&gt;: https://github.com/bknd-io/bknd/compare/v0.13.0...v0.14.0&lt;/p&gt;</content>
    <link href="https://github.com/bknd-io/bknd/releases/tag/v0.14.0" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/bknd-io/bknd/releases/tag/v0.15.0</id>
    <title>New release for bknd: v0.15.0</title>
    <updated>2025-07-05T04:25:25-04:00</updated>
    <author>
      <name>bknd-io/bknd</name>
    </author>
    <content>&lt;h2&gt;⚠️ Native SQLite and unified connections (https://github.com/bknd-io/bknd/pull/186, https://github.com/bknd-io/bknd/pull/188, https://github.com/bknd-io/bknd/pull/193)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;[!WARNING]
This is a breaking change, it requires Node.js &amp;gt;= 22, and for non-edge environments to explicitly use the &lt;code&gt;libsql&lt;/code&gt; function to continue using LibSQL&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Previously there was a hard dependency to LibSQL. While it's still recommended and supported as a first-party, bknd will now use the built-in SQLite implementation depending on your environment:
* Node: uses &lt;code&gt;node:sqlite&lt;/code&gt; – this now requires Node.js &amp;gt;= 22, the current LTS
* Bun: uses &lt;code&gt;bun:sqlite&lt;/code&gt;
* Deno: uses &lt;code&gt;node:sqlite&lt;/code&gt;
* Cloudflare: uses D1&lt;/p&gt;
&lt;p&gt;To make this maintainable, the connections and especially the SQLite connections have been refactored and generalized. To explicitly use LibSQL as the connection, wrap the connection object around &lt;code&gt;libsql&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ts
// bknd.config.ts
import { libsql } from "bknd/data";
export default {
   connection: libsql({ url: "&amp;lt;url&amp;gt;", authToken: "&amp;lt;token&amp;gt;" })
}&lt;/code&gt; &lt;/p&gt;
&lt;h2&gt;Improved plugins (https://github.com/bknd-io/bknd/pull/187)&lt;/h2&gt;
&lt;p&gt;Plugins got a massive update to allow them to become a lot more powerful. They can now supply additional schema required for the plugin to work, as well as inject into app lifecycle events. To start off, there are a few useful plugins added. E.g. you can now automatically sync your types every time you update your schema:&lt;/p&gt;
&lt;p&gt;```ts
// bknd.config.ts
import type { BkndConfig } from "bknd";
import { showRoutes, syncTypes } from "bknd/plugins";&lt;/p&gt;
&lt;p&gt;export default {
   options: {
      plugins: [
         // console logs a list of registered routes the first time the app boots
         showRoutes({ once: true }),&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;     // writes down the schema types on boot and config change
     syncTypes({
        enabled: true,
        write: async (et) =&amp;gt; {
           // customize the location and the writer
           await Bun.write("bknd-types.d.ts", et.toString());
        },
     }),
  ],
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;},
} as const satisfies BkndConfig;
```&lt;/p&gt;
&lt;p&gt;Docs on how to create your own plugins will follow soon, but you can take a look at it &lt;a href="https://github.com/bknd-io/bknd/pull/187"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;App drivers (https://github.com/bknd-io/bknd/pull/190)&lt;/h2&gt;
&lt;p&gt;Unlike adapters (e.g. for storage, or authentication), app drivers can be defined before initialization without the ability to modify them in the UI. Drivers can be used to send emails, or to cache assets. &lt;/p&gt;
&lt;p&gt;```ts
// bknd.config.ts
import type { BkndConfig } from "bknd";
import { resendEmail, memoryCache } from "bknd/core";&lt;/p&gt;
&lt;p&gt;export default {
   options: {
      drivers: {
         email: resendEmail({ apiKey: "..." }),
         cache: memoryCache(),
      },
   },
} as const satisfies BkndConfig;
```&lt;/p&gt;
&lt;p&gt;Currently there are a few built-in drivers available, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;email: Resend, MailChannels, AWS SES&lt;/li&gt;
&lt;li&gt;cache: in-memory (LRU), Cloudflare KV&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It's very straightforward to add your own driver, docs will follow soon. Read more about it &lt;a href="https://github.com/bknd-io/bknd/pull/190"&gt;here&lt;/a&gt; if you're curious.&lt;/p&gt;
&lt;h2&gt;Other Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;admin: add options such as logo return path when served static by @dswbx in https://github.com/bknd-io/bknd/pull/191&lt;/li&gt;
&lt;li&gt;fix cloudflare r2 adapter range requests by @dswbx in https://github.com/bknd-io/bknd/pull/195&lt;/li&gt;
&lt;li&gt;Update docker.mdx by @stormbyte in https://github.com/bknd-io/bknd/pull/194&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;@stormbyte made their first contribution in https://github.com/bknd-io/bknd/pull/194&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Full Changelog&lt;/strong&gt;: https://github.com/bknd-io/bknd/compare/v0.14.0...v0.15.0&lt;/p&gt;</content>
    <link href="https://github.com/bknd-io/bknd/releases/tag/v0.15.0" rel="alternate"/>
  </entry>
</feed>
