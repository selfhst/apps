<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://selfh.st/apps</id>
  <title>Logto Releases</title>
  <updated>2025-08-08T10:33:35.448155-04:00</updated>
  <author>
    <name>selfh.st</name>
    <email>contact@selfh.st</email>
  </author>
  <link href="https://selfh.st/apps" rel="alternate"/>
  <generator uri="https://lkiesow.github.io/python-feedgen" version="0.9.0">python-feedgen</generator>
  <subtitle>Self-hosted software releases generated by selfh.st</subtitle>
  <entry>
    <id>https://github.com/logto-io/logto/releases/tag/v1.26.0</id>
    <title>New release for Logto: v1.26.0</title>
    <updated>2025-03-31T04:09:45-04:00</updated>
    <author>
      <name>logto-io/logto</name>
    </author>
    <content>&lt;p&gt;&lt;img alt="logto-changelog-2025-03-31" src="https://github.com/user-attachments/assets/dada7218-0e67-4edd-86fe-3dabcf00c41d" /&gt;&lt;/p&gt;
&lt;h2&gt;Support multiple sign-up identifiers&lt;/h2&gt;
&lt;p&gt;Logto now supports configuring multiple required identifiers for user registration. This enhancement extends the previous single-identifier limitation, enabling a more comprehensive sign-up process.&lt;/p&gt;
&lt;h3&gt;Sign-in experience schema&lt;/h3&gt;
&lt;p&gt;Introduces a new optional field, &lt;code&gt;secondaryIdentifiers&lt;/code&gt;, to the sign-in experience sign-up settings. This enhancement allows developers to specify multiple required user identifiers during the user sign-up process. Available options include &lt;code&gt;email&lt;/code&gt;, &lt;code&gt;phone&lt;/code&gt;, &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;emailOrPhone&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The difference between &lt;code&gt;signUp.identifiers&lt;/code&gt;and new &lt;code&gt;signUp.secondaryIdentifiers&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;h4&gt;Primary identifiers (&lt;code&gt;signUp.identifiers&lt;/code&gt;):&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Maintains backward compatibility with existing sign-in experience settings&lt;/li&gt;
&lt;li&gt;Represents the initial registration form&lt;/li&gt;
&lt;li&gt;Uses OR logic: Only one type of identifier will be collected&lt;/li&gt;
&lt;li&gt;Special case: &lt;code&gt;[email, phone]&lt;/code&gt; allows either email OR phone registration, treated as a single requirement.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Secondary identifiers (&lt;code&gt;signUp.secondaryIdentifiers&lt;/code&gt;):&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Optional&lt;/li&gt;
&lt;li&gt;New field introduced for multi-identifier support&lt;/li&gt;
&lt;li&gt;Collects additional required identifiers after primary registration&lt;/li&gt;
&lt;li&gt;Uses AND logic: all configured identifiers are mandatory&lt;/li&gt;
&lt;li&gt;Supports &lt;code&gt;emailOrPhone&lt;/code&gt; type: requires either email OR phone, treated as a single requirement&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt;:&lt;/p&gt;
&lt;h4&gt;Example 1: Username with Required Email and Phone&lt;/h4&gt;
&lt;p&gt;Primary: &lt;code&gt;username&lt;/code&gt;&lt;br /&gt;
Secondary: 'email&lt;code&gt;and&lt;/code&gt;phone`&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json
{
  "identifiers": ["username"],
  "secondaryIdentifiers": [
    {
      "type": "email",
      "verify": true
    },
    {
      "type": "phone",
      "verify": true
    }
  ],
  "verify": true,
  "password": true
}&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;Example 2: Username with Either Email or Phone&lt;/h4&gt;
&lt;p&gt;Primary: &lt;code&gt;username&lt;/code&gt;&lt;br /&gt;
Secondary: &lt;code&gt;emailOrPhone&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json
{
  "identifiers": ["username"],
  "secondaryIdentifiers": [
    {
      "type": "emailOrPhone",
      "verify": true
    }
  ],
  "verify": true,
  "password": true
}&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;Example 3: Email/Phone with Required Username&lt;/h4&gt;
&lt;p&gt;Primary: &lt;code&gt;email&lt;/code&gt; OR &lt;code&gt;phone&lt;/code&gt;
Secondary: &lt;code&gt;username&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json
{
  "identifiers": ["email", "phone"],
  "secondaryIdentifiers": [
    {
      "type": "username",
      "verify": true
    }
  ],
  "verify": true,
  "password": false
}&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Console updates&lt;/h3&gt;
&lt;p&gt;Enhanced Sign-up Configuration UI:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Introduced a multi-selector interface replacing the previous single-identifier selector&lt;/li&gt;
&lt;li&gt;Added drag-and-drop functionality for prioritizing identifiers&lt;/li&gt;
&lt;li&gt;The first identifier in the list serves as the primary identifier (&lt;code&gt;signUp.identifiers&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Subsequent identifiers are stored as secondary identifiers (&lt;code&gt;signUp.secondaryIdentifiers&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;image src="https://github.com/user-attachments/assets/8fb90f21-9c7c-412d-9e8c-e4ee191ca8a8" width=500 /&gt;&lt;/p&gt;
&lt;h2&gt;Enhanced sign-in experience configuration&lt;/h2&gt;
&lt;p&gt;We've relaxed several configuration constraints to give you more flexibility in customizing your authentication flows.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The password requirement is now optional when using &lt;code&gt;username&lt;/code&gt; as a sign-up identifier.  Please note, when configuring &lt;code&gt;username&lt;/code&gt; as the sole sign-up identifier with password disabled, users will be unable to authenticate after registration. Ensure at least one of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Enable password requirement at sign-up&lt;/li&gt;
&lt;li&gt;Configure additional sign-up identifiers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Removed the constraint requiring sign-up identifiers to be enabled as sign-in methods. We have fully decoupled the sign-up identifier settings from the sign-in methods. Developers can now require as many user identifiers as needed during the sign-up process without impacting the sign-in process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Removed the requirement for password verification across all sign-in methods when password is enabled for sign-up.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Experience package migration&lt;/h2&gt;
&lt;p&gt;In this release, we have transitioned the user sign-in experience from the legacy &lt;code&gt;@logto/experience-legacy&lt;/code&gt; package to the latest &lt;code&gt;@logto/experience package&lt;/code&gt;. This change fully adopts our new Experience API, enhancing the underlying architecture while maintaining the same user experience.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The sign-in experience front-end  now uses the &lt;code&gt;@logto/experience&lt;/code&gt; package by default.&lt;/li&gt;
&lt;li&gt;Fully adopts our new Experience API for improved performance and maintainability&lt;/li&gt;
&lt;li&gt;Maintains complete feature parity with no visible changes to end-users&lt;/li&gt;
&lt;li&gt;Legacy Interaction API and &lt;code&gt;@logto/experience-legacy&lt;/code&gt; will be deprecated in future releases.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;CLI updates&lt;/h2&gt;
&lt;h3&gt;@logto/translate&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Improve the OpenAI prompt to better support i18n plural form suffixes&lt;/li&gt;
&lt;li&gt;make method &lt;code&gt;isLanguageTag&lt;/code&gt; case-insensitive&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Language tag case inconsistency was causing translation mismatches across packages:
     - &lt;code&gt;@logto/phrases&lt;/code&gt; and &lt;code&gt;@logto/phrases-experience&lt;/code&gt;: using lowercase tags (e.g., &lt;code&gt;pt-br&lt;/code&gt;, &lt;code&gt;zh-cn&lt;/code&gt;)
     - &lt;code&gt;@logto/language-kit&lt;/code&gt;: using mixed-case tags (e.g., &lt;code&gt;pt-BR&lt;/code&gt;, &lt;code&gt;zh-CN&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;Updated &lt;code&gt;isLanguageTag&lt;/code&gt; function in language kit to be case-insensitive, ensuring:
     - Consistent language tag matching regardless of case
     - Proper detection of all language tags by translate CLI tool
     - Fixed missing translations due to case mismatches&lt;/p&gt;
&lt;h2&gt;Logto integrations updates&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;WordPress integration guide&lt;/strong&gt;: Added out-of-box WordPress plugin integration documentation to Logto console&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Azure AD social connector enhancement&lt;/strong&gt;: Added OAuth &lt;code&gt;scopes&lt;/code&gt; field to &lt;code&gt;@logto/connector-azuread&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Enables customization of requested user permissions&lt;/li&gt;
&lt;li&gt;Provides greater flexibility in access control&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OIDC SSO connector authentication bug fixes&lt;/strong&gt;: Removed &lt;code&gt;client_id&lt;/code&gt; from token request body&lt;/li&gt;
&lt;li&gt;Resolves compatibility issues with OIDC providers like Okta&lt;/li&gt;
&lt;li&gt;Eliminates redundant client authentication method&lt;ul&gt;
&lt;li&gt;Before: &lt;code&gt;client_id&lt;/code&gt; included in both request body and authentication header&lt;/li&gt;
&lt;li&gt;After: Uses authentication header only&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;This OIDC SSO connector update improves compatibility with providers that enforce strict client authentication methods. By removing the redundant &lt;code&gt;client_id&lt;/code&gt; from the request body while maintaining the authentication header, we ensure consistent behavior across different OIDC providers.&lt;/li&gt;
&lt;/ol&gt;</content>
    <link href="https://github.com/logto-io/logto/releases/tag/v1.26.0" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/logto-io/logto/releases/tag/v1.27.0</id>
    <title>New release for Logto: v1.27.0</title>
    <updated>2025-04-27T06:03:16-04:00</updated>
    <author>
      <name>logto-io/logto</name>
    </author>
    <content>&lt;p&gt;&lt;img alt="logto-changelog-2025-04-27" src="https://github.com/user-attachments/assets/f7d816bd-ba2c-4952-b3c5-954eb3e96025" /&gt;&lt;/p&gt;
&lt;h2&gt;Security center in Logto Console&lt;/h2&gt;
&lt;p&gt;We have introduced a new"Security" page in the Logto console, which includes the following features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Password policy: This feature has been migrated from the "Sign-in Experience" page to the new "Security" page.&lt;/li&gt;
&lt;li&gt;CAPTCHA: Enable CAPTCHA for sign-up, sign-in, and password recovery to mitigate automated threats.&lt;/li&gt;
&lt;li&gt;Identifier lockout: Temporarily lock an identifier after multiple failed authentication attempts (e.g., consecutive incorrect passwords or verification codes) to prevent brute force access.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Refer to &lt;a href="https://docs.logto.io/security"&gt;documentation&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2&gt;Captcha bot protection&lt;/h2&gt;
&lt;p&gt;As mentioned in the above "Security" update, you can now enable CAPTCHA bot protection for your sign-in experience with providers such as Google reCAPTCHA enterprise and Cloudflare Turnstile.&lt;/p&gt;
&lt;p&gt;To enable CAPTCHA bot protection, you need to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to Console &amp;gt; Security &amp;gt; CAPTCHA &amp;gt; Bot protection.&lt;/li&gt;
&lt;li&gt;Select the CAPTCHA provider you want to use.&lt;/li&gt;
&lt;li&gt;Configure the CAPTCHA provider by following our step-by-step guide.&lt;/li&gt;
&lt;li&gt;Save the settings.&lt;/li&gt;
&lt;li&gt;Enable CAPTCHA in the Security page.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then take a preview of your sign-in experience to see the CAPTCHA in action.&lt;/p&gt;
&lt;p&gt;Refer to &lt;a href="https://docs.logto.io/security/captcha"&gt;documentation&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2&gt;Identifier lockout (sentinel)&lt;/h2&gt;
&lt;p&gt;The identifier lockout has always been there protecting your Logto instance. However, previously it is hard-coded and not configurable. Now you can fully customize and override the default rules in the Security center.&lt;/p&gt;
&lt;p&gt;This update includes the follow 3 parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Maximum failed attempts:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This limits the number of consecutive failed authentication attempts per identifier within an hour. If the limit is exceeded, the identifier will be temporarily locked out.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Default value: 100&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lockout duration (minutes):&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This specifies the period during which all authentication attempts for the given identifier are blocked after exceeding the maximum failed attempts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Default value: 60 minutes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Manual unblock:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A new API endpoint has been introduced to manually unblock a specified list of identifiers. This feature is useful for administrators to unlock users who have been temporarily locked out due to exceeding the maximum failed attempts.&lt;/p&gt;
&lt;p&gt;Endpoint: &lt;code&gt;POST /api/sentinel-activities/delete&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This endpoint allows for the bulk deletion of all sentinel activities within an hour in the database based on the provided identifiers, effectively unblocking them.&lt;/p&gt;
&lt;p&gt;Refer to &lt;a href="https://docs.logto.io/security/identifier-lockout"&gt;documentation&lt;/a&gt; for details.&lt;/p&gt;
&lt;h2&gt;Magic link (one-time token) support&lt;/h2&gt;
&lt;p&gt;You can now use the "one-time token" to compose magic links, and send them to the end user's email.&lt;/p&gt;
&lt;p&gt;With a magic link, one can register a new account or sign in directly to the application, without the need to enter a password, or input verification codes.&lt;/p&gt;
&lt;p&gt;You can also use magic link to invite users to your organizations.&lt;/p&gt;
&lt;h3&gt;Example API request to create a one-time token&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;bash
POST /api/one-time-tokens&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Request payload:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;jsonc
{
  "email": "user@example.com",
  // Optional. Defaults to 600 (10 mins).
  "expiresIn": 3600,
  // Optional. User will be provisioned to the specified organizations upon successful verification.
  "context": {
    "jitOrganizationIds": ["your-org-id"],
  },
}&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Compose your magic link&lt;/h3&gt;
&lt;p&gt;After you get the one-time token, you can compose a magic link and send it to the end user's email address. The magic link should at least contain the token and the user email as parameters, and should navigate to a landing page in your own application. E.g. &lt;code&gt;https://yourapp.com/landing-page&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here's a simple example of what the magic link may look like:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://yourapp.com/landing-page?token=YHwbXSXxQfL02IoxFqr1hGvkB13uTqcd&amp;amp;email=user@example.com&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Refer to &lt;a href="https://docs.logto.io/end-user-flows/one-time-token"&gt;documentation&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2&gt;Bump node to v22&lt;/h2&gt;
&lt;p&gt;We've updated Node.js to v22 for better performance and security.&lt;/p&gt;
&lt;h2&gt;Improvements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;f41938257: respond 404 for non-existing paths in &lt;code&gt;/assets&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;7dbcedaa1: move password encyption to separate worker thread&lt;/li&gt;
&lt;li&gt;cfedfb306: clean up legacy Experience package&lt;/li&gt;
&lt;li&gt;752d406bd: support string-typed boolean claims in OIDC connector&lt;/li&gt;
&lt;li&gt;59c398442: add Ukrainian translation to Experience (credit @HighError)&lt;/li&gt;
&lt;li&gt;ba7621005: convert Windows absolute paths to file URLs for dynamic imports (credit @jtmaveryk)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Security updates and vulnerability fixes&lt;/h2&gt;
&lt;h2&gt;New Contributors&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;@HighError made their first contribution in https://github.com/logto-io/logto/pull/7205&lt;/li&gt;
&lt;li&gt;@jtmaveryk made their first contribution in https://github.com/logto-io/logto/pull/7126&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Full Changelog&lt;/strong&gt;: https://github.com/logto-io/logto/compare/v1.26.0...v1.27&lt;/p&gt;</content>
    <link href="https://github.com/logto-io/logto/releases/tag/v1.27.0" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/logto-io/logto/releases/tag/v1.28.0</id>
    <title>New release for Logto: v1.28.0</title>
    <updated>2025-05-26T09:25:04-04:00</updated>
    <author>
      <name>logto-io/logto</name>
    </author>
    <content>&lt;p&gt;&lt;img alt="logto-changelog-2025-05-26" src="https://github.com/user-attachments/assets/e24a1975-90a4-44b7-af57-54471c9c78bc" /&gt;&lt;/p&gt;
&lt;h2&gt;Email blocklist policy&lt;/h2&gt;
&lt;p&gt;We've introduced a comprehensive email blocklist policy system with a dedicated settings page in the Logto console's Security section. This new feature provides granular control over which email addresses can be used for sign-up and account linking.&lt;/p&gt;
&lt;p&gt;With this new policy, you can:
- Customize email restrictions through a flexible blocklist system
- Prevent sign-ups or account linking with specific email addresses or domains
- Control email subaddressing (e.g., 'user+tag@example.com')&lt;/p&gt;
&lt;h2&gt;Phone number validation and normalization&lt;/h2&gt;
&lt;p&gt;We've improved phone number handling to ensure consistent format validation and storage:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Added proper handling for phone numbers with leading zeros in national format&lt;/li&gt;
&lt;li&gt;Normalizes numbers like +61 (0)2 1234 5678 to +61 2 1234 5678&lt;/li&gt;
&lt;li&gt;Users can sign in with either format (with or without leading zero)&lt;/li&gt;
&lt;li&gt;Existing accounts can still use their original phone number format&lt;/li&gt;
&lt;li&gt;Implemented stricter phone number format validation in database&lt;/li&gt;
&lt;li&gt;Fixed phone number format inconsistencies (GitHub issue #7371, thanks for @mrfrase3)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;QQ social connector&lt;/h2&gt;
&lt;p&gt;We've expanded our social sign-in options by introducing a new QQ social connector specifically designed for web applications, enabling seamless QQ account integration for your users. (Contributed by @yenharvey in #7380)&lt;/p&gt;
&lt;h2&gt;OIDC connector&lt;/h2&gt;
&lt;p&gt;We've updated our OIDC connector configuration to make the &lt;code&gt;userinfo_endpoint&lt;/code&gt; field optional. The system now intelligently handles user data extraction based on available endpoints, providing a more flexible authentication solution while maintaining OIDC specification compliance.&lt;/p&gt;
&lt;p&gt;This update enables:
- Seamless integration with Azure AD B2C SSO applications
- Automatic fallback to &lt;code&gt;id_token&lt;/code&gt; claims when &lt;code&gt;userinfo_endpoint&lt;/code&gt; is unavailable
- Full compatibility with standard OIDC providers
- Removal of integration barriers for non-standard OIDC implementations&lt;/p&gt;
&lt;h2&gt;Improvements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Enhanced translation key synchronization to handle empty files during sync process, eliminating manual intervention needs&lt;/li&gt;
&lt;li&gt;Upgraded to &lt;code&gt;gpt-4.1&lt;/code&gt; as the default translation model for better cost-efficiency&lt;/li&gt;
&lt;li&gt;Improved CAPTCHA configuration visibility in console with persistent toggle display&lt;/li&gt;
&lt;li&gt;Updated CAPTCHA settings navigation to /security/captcha&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Bug fixes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Added missing CAPTCHA box to identifier sign in form&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Full Changelog&lt;/strong&gt;: https://github.com/logto-io/logto/compare/v1.27.0...v1.28&lt;/p&gt;</content>
    <link href="https://github.com/logto-io/logto/releases/tag/v1.28.0" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/logto-io/logto/releases/tag/v1.29.0</id>
    <title>New release for Logto: v1.29.0</title>
    <updated>2025-06-27T01:47:28-04:00</updated>
    <author>
      <name>logto-io/logto</name>
    </author>
    <content>&lt;p&gt;&lt;img alt="logto-changelog-2025-06-27" src="https://github.com/user-attachments/assets/3749c4e0-f328-4bb7-94e3-2b24424c00d6" /&gt;&lt;/p&gt;
&lt;h2&gt;Account API for WebAuthn (passkeys)&lt;/h2&gt;
&lt;p&gt;You can now manage WebAuthn passkeys in Account API, including:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Binding a WebAuthn passkey to the user's account through your website.&lt;/li&gt;
&lt;li&gt;Manage the passkeys in the user's account.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We have implemented &lt;a href="https://passkeys.dev/docs/advanced/related-origins/"&gt;Related Origin Requests&lt;/a&gt; so that you can manage the WebAuthn passkeys on your website which has a different domain from the Logto's sign-in page.&lt;/p&gt;
&lt;p&gt;To learn more, check out the &lt;a href="https://docs.logto.io/end-user-flows/account-settings/by-account-api"&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Access user interaction details in custom JWT&lt;/h2&gt;
&lt;p&gt;User interaction data is now accessible through the &lt;code&gt;context.interaction&lt;/code&gt; when generating custom token claims:&lt;/p&gt;
&lt;p&gt;| Property              | Description                                                                                                     | Type                   |
  | --------------------- | --------------------------------------------------------------------------------------------------------------- | ---------------------- |
  | &lt;code&gt;interactionEvent&lt;/code&gt;    | The interaction event of the current user interaction                                                           | &lt;code&gt;SignIn&lt;/code&gt; or &lt;code&gt;Register&lt;/code&gt; |
  | &lt;code&gt;userId&lt;/code&gt;              | The user id of the current user interaction                                                                     | &lt;code&gt;string&lt;/code&gt;               |
  | &lt;code&gt;verificationRecords&lt;/code&gt; | A list of verification records submitted by the user to identify and verify their identity during interactions. | &lt;code&gt;VerificationRecord[]&lt;/code&gt; |&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example Use Case:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Read the verification records from the interaction context. If an Enterprise SSO verification record is present, include the corresponding user profile from the Enterprise SSO identities as additional token claims.&lt;/p&gt;
&lt;p&gt;```ts
const { interaction } = context;
const verifications = interaction?.verificationRecords || [];&lt;/p&gt;
&lt;p&gt;const ssoVerification = verifications.find(
  (record) =&amp;gt; record.type === "EnterpriseSso",
);&lt;/p&gt;
&lt;p&gt;if (ssoVerification) {
  return {
    enterpriseSsoIdentityId:
      enterpriseSsoVerification?.enterpriseSsoUserInfo?.id,
    familyName: enterpriseSsoVerification?.enterpriseSsoUserInfo?.familyName,
  };
}
```&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://docs.logto.io/developers/custom-token-claims/create-script#context-only-available-for-user-access-token"&gt;custom token claims context&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2&gt;Improvements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Updated timestamp tracking for SSO: Added &lt;code&gt;updated_at&lt;/code&gt; field to &lt;code&gt;user_sso_identities&lt;/code&gt; table&lt;/li&gt;
&lt;li&gt;Changed user password digest length to 256, supporting &lt;code&gt;Legacy&lt;/code&gt; hashing algorithm such as &lt;code&gt;SHA512&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Mask TOTP secret from audit log&lt;/li&gt;
&lt;li&gt;Support flexible size in Turnstile widget, allowing the widget to scale responsively and fill the available space. Contributed by @GeisonPiegas&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Bug fixes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fixed SAML application callback API to properly handle RelayState parameter in authentication responses&lt;/li&gt;
&lt;li&gt;Made &lt;code&gt;access_token&lt;/code&gt; optional for Azure OIDC SSO connector, previously, the Azure OIDC connector strictly required an access token in the token response, which caused issues with Azure B2C applications that only return ID tokens.&lt;/li&gt;
&lt;li&gt;Fixed potential WebAuthn registration errors by specifying the displayName. For example, when using Chrome on Windows 11 with the "Use other devices" option (scanning QR code), an empty displayName will cause the registration to fail.&lt;/li&gt;
&lt;li&gt;Fixed an issue where the payment page could not open in iOS Safari.&lt;/li&gt;
&lt;/ul&gt;</content>
    <link href="https://github.com/logto-io/logto/releases/tag/v1.29.0" rel="alternate"/>
  </entry>
  <entry>
    <id>https://github.com/logto-io/logto/releases/tag/v1.30.1</id>
    <title>New release for Logto: v1.30.1</title>
    <updated>2025-07-31T13:12:43-04:00</updated>
    <author>
      <name>logto-io/logto</name>
    </author>
    <content>&lt;blockquote&gt;
&lt;p&gt;[!NOTE]
The v1.30.0 release contained an CLI issue affecting DB upgrade, and have been resolved this in the v1.30.1 patch release. We strongly recommend upgrading to v1.30.1.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img width="2120" height="1192" alt="logto-changelog-2025-07-31" src="https://github.com/user-attachments/assets/455f5be9-4bfd-4427-a0b5-f11ea9ca2d4c" /&gt;&lt;/p&gt;
&lt;h2&gt;Logto API SDK&lt;/h2&gt;
&lt;p&gt;A TypeScript SDK for interacting with Logto's Management API using client credentials authentication.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a machine-to-machine application in your Logto Console.&lt;/li&gt;
&lt;li&gt;Grant the application access to the Management API.&lt;/li&gt;
&lt;li&gt;Install the SDK via npm: &lt;code&gt;npm install @logto/api&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;createManagementApi()&lt;/code&gt; to create a typed Management API client with your application's credentials.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This SDK simplifies the process of integrating with Logto's Management API, allowing developers to focus on building features rather than handling API requests and responses manually.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Handles OAuth token authentication and renewal automatically.&lt;/li&gt;
&lt;li&gt;Supports both Logto Cloud and self-hosted instances.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Secret Vault&lt;/h2&gt;
&lt;p&gt;The Secret Vault is designed to securely store sensitive user data—such as access tokens, API keys, passcodes, and other confidential information. These secrets are typically used to access third-party services on behalf of users, making secure storage essential.&lt;/p&gt;
&lt;p&gt;With this release, federated token set storage support is added to both social and enterprise SSO connectors. When enabled, Logto securely stores the token set issued by the provider after a successful user authentication. Applications can then retrieve the access token later to access third-party APIs without requiring the user to reauthenticate.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Supported connectors:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Social connectors: &lt;strong&gt;GitHub&lt;/strong&gt;, &lt;strong&gt;Google&lt;/strong&gt;, &lt;strong&gt;Facebook&lt;/strong&gt;, &lt;strong&gt;Standard OAuth 2.0&lt;/strong&gt;, and &lt;strong&gt;Standard OIDC&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Enterprise SSO connectors: All OIDC-based SSO connectors&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;How it works:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Enable token storage for social and enterprise SSO connectors in the Logto Console or via the Logto Management API.&lt;/li&gt;
&lt;li&gt;Once enabled, Logto automatically stores the token set issued by the provider after a successful user authentication.&lt;/li&gt;
&lt;li&gt;After the token set is stored, you can retrieve the access token via the Logto Account API for the user. This allows your application to access third-party APIs without requiring the user to reauthenticate.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For more details, see the &lt;a href="https://docs.logto.io/secret-vault/"&gt;Secret Vault documentation&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!NOTE]
For OSS users: To enable the Secret Vault feature, you must set the &lt;code&gt;SECRET_VAULT_KEK&lt;/code&gt; environment variable to a valid base64-encoded secret key. This key is used to encrypt and decrypt the secrets stored in the vault. For more information, refer to the &lt;a href="https://docs.logto.io/concepts/core-service/configuration#variables"&gt;configuration variables documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Add TOTP and Backup Codes via Account API&lt;/h2&gt;
&lt;p&gt;Users can now add TOTP and backup codes via the Account API.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;POST /api/my-account/mfa-verifications/totp-secret/generate&lt;/code&gt;: Generate a TOTP secret.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POST /api/my-account/mfa-verifications/backup-codes/generate&lt;/code&gt;: Generate backup codes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POST /api/my-account/mfa-verifications&lt;/code&gt;: Add a TOTP or backup code using the generated secret or codes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GET /api/my-account/mfa-verifications/backup-codes&lt;/code&gt;: Retrieve backup codes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Bug Fixes&lt;/h2&gt;
&lt;h3&gt;Tenant-aware foreign key constraint for &lt;code&gt;organization_user_relations&lt;/code&gt; table&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Developers could mistakenly assign a &lt;code&gt;user_id&lt;/code&gt; from another tenant to an organization, causing 500 errors on organization user API endpoints. The original &lt;code&gt;organization_user_relations&lt;/code&gt; table only had a foreign key constraint on &lt;code&gt;users (id)&lt;/code&gt;, allowing any existing user ID to be assigned regardless of tenant isolation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Root Cause&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Logto applies Row Level Security (RLS) on all tables to isolate tenant data access. When joining the users table with &lt;code&gt;organization_user_relations&lt;/code&gt;, the actual user data becomes inaccessible to the current tenant due to RLS restrictions, causing user data to return null and triggering 500 server errors.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A composite foreign key constraint &lt;code&gt;(tenant_id, user_id)&lt;/code&gt; referencing &lt;code&gt;users (tenant_id, id)&lt;/code&gt; was added to ensure the organization-user relation's tenant ID matches the user's tenant ID. This enforces proper tenant isolation at the database level.&lt;/p&gt;
&lt;h2&gt;Other Improvements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Social connectors&lt;/strong&gt;: Added support for providing a custom &lt;code&gt;scope&lt;/code&gt; parameter when generating the authorization URL for social connectors. This allows you to request additional permissions from the social provider when calling the Logto &lt;a href="https://openapi.logto.io/operation/operation-createverificationbysocial"&gt;social verification endpoint&lt;/a&gt;. If the scope is provided, it will be used in the authorization request; otherwise, the default scope configured in the connector settings will be used.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Console&lt;/strong&gt;: To better support the new Secret Vault feature, we have refactored the layout of the user details page. User social and enterprise SSO identities are now organized into a new Connection section. This section lists all of a user’s linked connections, showing third-party identity information and token storage status (if applicable). A detailed user identity page is also available for each connection, providing more information about the linked identity and its associated tokens.&lt;/li&gt;
&lt;/ul&gt;</content>
    <link href="https://github.com/logto-io/logto/releases/tag/v1.30.1" rel="alternate"/>
  </entry>
</feed>
